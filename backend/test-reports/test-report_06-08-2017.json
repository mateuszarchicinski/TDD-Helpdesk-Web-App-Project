{
  "stats": {
    "suites": 46,
    "tests": 115,
    "passes": 115,
    "pending": 0,
    "failures": 0,
    "start": "2017-08-06T20:36:21.701Z",
    "end": "2017-08-06T20:36:26.340Z",
    "duration": 4639,
    "testsRegistered": 115,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Application responses:",
        "suites": [
          {
            "title": "GET: /",
            "suites": [],
            "tests": [
              {
                "title": "should returns status code: 200",
                "fullTitle": "Application responses: GET: / should returns status code: 200",
                "timedOut": false,
                "duration": 2555,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "setTimeout(() => {\n    /* eslint-disable */\n    request.get(baseUrl, (error, response, body) => {\n        /* eslint-enable */\n        if (error) {\n            throw error;\n        }\n        expect(response.statusCode).to.equal(200);\n        done();\n    });\n}, 2500);",
                "err": {},
                "isRoot": false,
                "uuid": "429889d8-11d4-47ce-9763-7b4fb3cc27a4",
                "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should returns header with a value of property content-type: text/html; charset=utf-8",
                "fullTitle": "Application responses: GET: / should returns header with a value of property content-type: text/html; charset=utf-8",
                "timedOut": false,
                "duration": 1264,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "setTimeout(() => {\n    /* eslint-disable */\n    request.get(baseUrl, (error, response, body) => {\n        /* eslint-enable */\n        if (error) {\n            throw error;\n        }\n        expect(response.headers['content-type']).to.equal('text/html; charset=utf-8');\n        done();\n    });\n}, 1250);",
                "err": {},
                "isRoot": false,
                "uuid": "31d6047f-720f-4772-8abb-8e72964c1e76",
                "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should returns status code 301",
                "fullTitle": "Application responses: GET: / should returns status code 301",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/* eslint-disable */\nrequest.get({\n    url: baseUrl + '///',\n    followRedirect: false\n}, (error, response, body) => {\n    /* eslint-enable */\n    if (error) {\n        throw error;\n    }\n    expect(response.statusCode).to.equal(301);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e125c6d1-c268-47d2-9cd3-d2b994ace6bd",
                "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should returns header with a value of property location: http://localhost:5848",
                "fullTitle": "Application responses: GET: / should returns header with a value of property location: http://localhost:5848",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/* eslint-disable */\nrequest.get({\n    url: baseUrl + '///',\n    followRedirect: false\n}, (error, response, body) => {\n    /* eslint-enable */\n    if (error) {\n        throw error;\n    }\n    expect(response.headers.location).to.equal(baseUrl);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5951f386-a65e-4da6-8cbc-d18dff3429dc",
                "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\app.js",
            "uuid": "28b13141-f93d-4954-b38d-d48a730d8bca",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Application responses: GET: / \"before all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "createServer = app.appSource(helpers.PORT, helpers.HOST);",
                "err": {},
                "isRoot": false,
                "uuid": "91a1d681-69ba-4d23-9970-17985b97b178",
                "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Application responses: GET: / \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "createServer.close();",
                "err": {},
                "isRoot": false,
                "uuid": "f4598c6d-6796-446e-b451-88ac988ffe79",
                "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\app.js",
            "passes": [
              {
                "title": "should returns status code: 200",
                "fullTitle": "Application responses: GET: / should returns status code: 200",
                "timedOut": false,
                "duration": 2555,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "setTimeout(() => {\n    /* eslint-disable */\n    request.get(baseUrl, (error, response, body) => {\n        /* eslint-enable */\n        if (error) {\n            throw error;\n        }\n        expect(response.statusCode).to.equal(200);\n        done();\n    });\n}, 2500);",
                "err": {},
                "isRoot": false,
                "uuid": "429889d8-11d4-47ce-9763-7b4fb3cc27a4",
                "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should returns header with a value of property content-type: text/html; charset=utf-8",
                "fullTitle": "Application responses: GET: / should returns header with a value of property content-type: text/html; charset=utf-8",
                "timedOut": false,
                "duration": 1264,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "setTimeout(() => {\n    /* eslint-disable */\n    request.get(baseUrl, (error, response, body) => {\n        /* eslint-enable */\n        if (error) {\n            throw error;\n        }\n        expect(response.headers['content-type']).to.equal('text/html; charset=utf-8');\n        done();\n    });\n}, 1250);",
                "err": {},
                "isRoot": false,
                "uuid": "31d6047f-720f-4772-8abb-8e72964c1e76",
                "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should returns status code 301",
                "fullTitle": "Application responses: GET: / should returns status code 301",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/* eslint-disable */\nrequest.get({\n    url: baseUrl + '///',\n    followRedirect: false\n}, (error, response, body) => {\n    /* eslint-enable */\n    if (error) {\n        throw error;\n    }\n    expect(response.statusCode).to.equal(301);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e125c6d1-c268-47d2-9cd3-d2b994ace6bd",
                "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should returns header with a value of property location: http://localhost:5848",
                "fullTitle": "Application responses: GET: / should returns header with a value of property location: http://localhost:5848",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/* eslint-disable */\nrequest.get({\n    url: baseUrl + '///',\n    followRedirect: false\n}, (error, response, body) => {\n    /* eslint-enable */\n    if (error) {\n        throw error;\n    }\n    expect(response.headers.location).to.equal(baseUrl);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5951f386-a65e-4da6-8cbc-d18dff3429dc",
                "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3833,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\app.js",
        "uuid": "efe7c8fe-b5fa-4b05-b875-e949ba1598a2",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\app.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Application modules:",
        "suites": [
          {
            "title": "app.source.js",
            "suites": [],
            "tests": [
              {
                "title": "is an object",
                "fullTitle": "Application modules: app.source.js is an object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(app).to.be.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "e4101863-f57d-465b-932f-cdcfdcd631de",
                "parentUUID": "136b26af-dff3-429c-9ec6-d8799c269ac9",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\app.source.js",
            "uuid": "136b26af-dff3-429c-9ec6-d8799c269ac9",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\app.source.js",
            "passes": [
              {
                "title": "is an object",
                "fullTitle": "Application modules: app.source.js is an object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(app).to.be.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "e4101863-f57d-465b-932f-cdcfdcd631de",
                "parentUUID": "136b26af-dff3-429c-9ec6-d8799c269ac9",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\app.source.js",
        "uuid": "24af38f4-bd0d-4637-b9f5-99e652301174",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\app.source.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Controllers:",
        "suites": [
          {
            "title": "login.js",
            "suites": [],
            "tests": [
              {
                "title": "ctrl without req.body.email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
                "fullTitle": "Controllers: login.js ctrl without req.body.email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "loginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: 'Request body do not have specified properties email or password.'\n});",
                "err": {},
                "isRoot": false,
                "uuid": "34c62e81-6a78-4ed7-942b-5116867668ef",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl in case of userModel.find() error should call next(err)",
                "fullTitle": "Controllers: login.js ctrl in case of userModel.find() error should call next(err)",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = userMock;\nuserModel.find.yields(errorsMock.normal);\nloginController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "a78e1a27-3c18-4dee-bfb4-fac77b30fbac",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl in case of userModel.find() return empty array should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "fullTitle": "Controllers: login.js ctrl in case of userModel.find() return empty array should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = userMock;\nuserModel.find.yields(null, []);\nloginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
                "err": {},
                "isRoot": false,
                "uuid": "0f06b45c-3eea-4cda-bf60-8d1cdb010a4a",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl in case of user.comparePasswords() error should call next(err)",
                "fullTitle": "Controllers: login.js ctrl in case of user.comparePasswords() error should call next(err)",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userMock.errCompare = errorsMock.normal;\nreqMock.body = userMock;\nuserModel.find.yields(null, [userMock]);\nloginController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "6a161832-b5ff-4334-8aaa-be3e5e00ac87",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl in case of user correct comparing passwords should call res with status 200 <number> and json {firstName: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
                "fullTitle": "Controllers: login.js ctrl in case of user correct comparing passwords should call res with status 200 <number> and json {firstName: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = userMock;\nuserModel.find.yields(null, [userMock]);\nloginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(200);\nexpect(resMock.json).to.have.been.calledWith(userMock);",
                "err": {},
                "isRoot": false,
                "uuid": "94b4dd0b-fe11-4115-9bf8-dd5e07a39f5f",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl in case of user incorrect comparing passwords should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "fullTitle": "Controllers: login.js ctrl in case of user incorrect comparing passwords should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = {\n    firstName: 'Aa',\n    email: 'a@a',\n    password: 'wrong_password'\n};\nuserModel.find.yields(null, [userMock]);\nloginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
                "err": {},
                "isRoot": false,
                "uuid": "c7aa905b-e97e-460b-b778-0325043fcaeb",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\controllers\\login.js",
            "uuid": "bf420f1f-756e-4434-87bf-38abdd31f430",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Controllers: login.js \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "userMock = helpers.USER_MODEL.MOCK();\nsinon.spy(resMock, 'status');\nsinon.spy(resMock, 'json');\nnextMock = sinon.spy();\nsinon.stub(userModel, 'find');",
                "err": {},
                "isRoot": false,
                "uuid": "5512ec5f-980c-4d5e-b245-dfbfa32e34b6",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Controllers: login.js \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "resMock.status.restore();\nresMock.json.restore();\nnextMock = null;\nuserModel.find.restore();",
                "err": {},
                "isRoot": false,
                "uuid": "28c6e00b-ba35-4e1f-b103-99578ed83bb0",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\controllers\\login.js",
            "passes": [
              {
                "title": "ctrl without req.body.email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
                "fullTitle": "Controllers: login.js ctrl without req.body.email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "loginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: 'Request body do not have specified properties email or password.'\n});",
                "err": {},
                "isRoot": false,
                "uuid": "34c62e81-6a78-4ed7-942b-5116867668ef",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl in case of userModel.find() error should call next(err)",
                "fullTitle": "Controllers: login.js ctrl in case of userModel.find() error should call next(err)",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = userMock;\nuserModel.find.yields(errorsMock.normal);\nloginController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "a78e1a27-3c18-4dee-bfb4-fac77b30fbac",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl in case of userModel.find() return empty array should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "fullTitle": "Controllers: login.js ctrl in case of userModel.find() return empty array should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = userMock;\nuserModel.find.yields(null, []);\nloginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
                "err": {},
                "isRoot": false,
                "uuid": "0f06b45c-3eea-4cda-bf60-8d1cdb010a4a",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl in case of user.comparePasswords() error should call next(err)",
                "fullTitle": "Controllers: login.js ctrl in case of user.comparePasswords() error should call next(err)",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userMock.errCompare = errorsMock.normal;\nreqMock.body = userMock;\nuserModel.find.yields(null, [userMock]);\nloginController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "6a161832-b5ff-4334-8aaa-be3e5e00ac87",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl in case of user correct comparing passwords should call res with status 200 <number> and json {firstName: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
                "fullTitle": "Controllers: login.js ctrl in case of user correct comparing passwords should call res with status 200 <number> and json {firstName: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = userMock;\nuserModel.find.yields(null, [userMock]);\nloginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(200);\nexpect(resMock.json).to.have.been.calledWith(userMock);",
                "err": {},
                "isRoot": false,
                "uuid": "94b4dd0b-fe11-4115-9bf8-dd5e07a39f5f",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl in case of user incorrect comparing passwords should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "fullTitle": "Controllers: login.js ctrl in case of user incorrect comparing passwords should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = {\n    firstName: 'Aa',\n    email: 'a@a',\n    password: 'wrong_password'\n};\nuserModel.find.yields(null, [userMock]);\nloginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
                "err": {},
                "isRoot": false,
                "uuid": "c7aa905b-e97e-460b-b778-0325043fcaeb",
                "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 8,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\controllers\\login.js",
        "uuid": "87773e3b-cbba-4eea-8320-df79c6d2d832",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\controllers\\login.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Controllers:",
        "suites": [
          {
            "title": "logout.js",
            "suites": [],
            "tests": [
              {
                "title": "should remove an active/requested token from user.active_tokens",
                "fullTitle": "Controllers: logout.js should remove an active/requested token from user.active_tokens",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(reqMock.user.active_tokens).to.contains('token');\nlogoutController(reqMock, resMock, nextMock);\nexpect(reqMock.user.active_tokens).to.not.contains('token');",
                "err": {},
                "isRoot": false,
                "uuid": "c0442a15-bc48-4d21-b14a-fe829c360d76",
                "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call once method user.save()",
                "fullTitle": "Controllers: logout.js should call once method user.save()",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "logoutController(reqMock, resMock, nextMock);\nexpect(reqMock.user.save).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "1b7026c6-eeee-4077-ac8a-0b99ef15a248",
                "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call once next(err)",
                "fullTitle": "Controllers: logout.js should call once next(err)",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.user.errSave = errorsMock.normal;\nlogoutController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledOnce.and.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "16a1e55a-a06b-4b1f-9596-a79f0299ae66",
                "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call res with status 204 <number> and end <empty>",
                "fullTitle": "Controllers: logout.js should call res with status 204 <number> and end <empty>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "logoutController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(204);\nexpect(resMock.end).to.have.been.calledWith();",
                "err": {},
                "isRoot": false,
                "uuid": "9ba601e2-8d68-41e3-8403-c39e596da37d",
                "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\controllers\\logout.js",
            "uuid": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Controllers: logout.js \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "reqMock = nodeMocksHttp.createRequest({\n    user: helpers.USER_MODEL.MOCK()\n});\nreqMock.user.active_tokens.push('token');\nreqMock.user.token = 'token';\nsinon.spy(resMock, 'status');\nsinon.spy(resMock, 'end');\nnextMock = sinon.spy();\nsinon.spy(reqMock.user, 'save');",
                "err": {},
                "isRoot": false,
                "uuid": "cd935d85-b40c-4b9c-bf42-cc1592c4bccd",
                "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Controllers: logout.js \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "resMock.status.restore();\nresMock.end.restore();\nnextMock = null;\nreqMock.user.save.restore();",
                "err": {},
                "isRoot": false,
                "uuid": "cab2fb70-b00d-4ff7-b53c-e281ab8311b5",
                "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\controllers\\logout.js",
            "passes": [
              {
                "title": "should remove an active/requested token from user.active_tokens",
                "fullTitle": "Controllers: logout.js should remove an active/requested token from user.active_tokens",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(reqMock.user.active_tokens).to.contains('token');\nlogoutController(reqMock, resMock, nextMock);\nexpect(reqMock.user.active_tokens).to.not.contains('token');",
                "err": {},
                "isRoot": false,
                "uuid": "c0442a15-bc48-4d21-b14a-fe829c360d76",
                "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call once method user.save()",
                "fullTitle": "Controllers: logout.js should call once method user.save()",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "logoutController(reqMock, resMock, nextMock);\nexpect(reqMock.user.save).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "1b7026c6-eeee-4077-ac8a-0b99ef15a248",
                "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call once next(err)",
                "fullTitle": "Controllers: logout.js should call once next(err)",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.user.errSave = errorsMock.normal;\nlogoutController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledOnce.and.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "16a1e55a-a06b-4b1f-9596-a79f0299ae66",
                "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call res with status 204 <number> and end <empty>",
                "fullTitle": "Controllers: logout.js should call res with status 204 <number> and end <empty>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "logoutController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(204);\nexpect(resMock.end).to.have.been.calledWith();",
                "err": {},
                "isRoot": false,
                "uuid": "9ba601e2-8d68-41e3-8403-c39e596da37d",
                "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\controllers\\logout.js",
        "uuid": "7ab12f78-38fd-43df-b5a1-c2df5dcbe89c",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\controllers\\logout.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Controllers:",
        "suites": [
          {
            "title": "main.js",
            "suites": [],
            "tests": [
              {
                "title": "is a function",
                "fullTitle": "Controllers: main.js is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(mainController).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "62f298c3-9266-47f1-b80a-86a4d59d4c6d",
                "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should accept only three arguments",
                "fullTitle": "Controllers: main.js should accept only three arguments",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(mainController.length).to.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "7f584ad4-1dc6-4b15-9349-1711188842ac",
                "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call function res.send() with default message",
                "fullTitle": "Controllers: main.js should call function res.send() with default message",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "mainController(reqMock, resMock, nextMock);\nexpect(resMock.send).to.always.have.been.calledWith('Main Controller: Hello World!');",
                "err": {},
                "isRoot": false,
                "uuid": "863dd942-aec3-4d7f-8307-8bdb91425ffe",
                "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\controllers\\main.js",
            "uuid": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Controllers: main.js \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sinon.spy(resMock, 'send');",
                "err": {},
                "isRoot": false,
                "uuid": "e96fd6ae-58f3-435f-8154-a023951a0222",
                "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Controllers: main.js \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "resMock.send.restore();",
                "err": {},
                "isRoot": false,
                "uuid": "cc46f145-89e7-42f1-8899-a316ea39aa5b",
                "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\controllers\\main.js",
            "passes": [
              {
                "title": "is a function",
                "fullTitle": "Controllers: main.js is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(mainController).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "62f298c3-9266-47f1-b80a-86a4d59d4c6d",
                "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should accept only three arguments",
                "fullTitle": "Controllers: main.js should accept only three arguments",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(mainController.length).to.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "7f584ad4-1dc6-4b15-9349-1711188842ac",
                "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call function res.send() with default message",
                "fullTitle": "Controllers: main.js should call function res.send() with default message",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "mainController(reqMock, resMock, nextMock);\nexpect(resMock.send).to.always.have.been.calledWith('Main Controller: Hello World!');",
                "err": {},
                "isRoot": false,
                "uuid": "863dd942-aec3-4d7f-8307-8bdb91425ffe",
                "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\controllers\\main.js",
        "uuid": "138d58e2-4729-4e2b-80d5-60262d43abbf",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\controllers\\main.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Controllers:",
        "suites": [
          {
            "title": "register.js",
            "suites": [],
            "tests": [
              {
                "title": "ctrl without req.body.firstName/email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
                "fullTitle": "Controllers: register.js ctrl without req.body.firstName/email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "registerController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: 'Request body do not have specified properties firstName, email or password.'\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6430cb99-7031-4dfb-b4c2-d913d10c044b",
                "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl with invalid req.body properties should call res with status 400 <number> and json {message: err.message} <object>",
                "fullTitle": "Controllers: register.js ctrl with invalid req.body properties should call res with status 400 <number> and json {message: err.message} <object>",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = userMock;\nuserModel.prototype.save.yields(errorsMock.validation);\nregisterController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: errorsMock.validation.message\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8602cf02-1989-4b0e-896a-aebebfeb3239",
                "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl in case of user.save() error should call next(err)",
                "fullTitle": "Controllers: register.js ctrl in case of user.save() error should call next(err)",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = userMock;\nuserModel.prototype.save.yields(errorsMock.normal);\nregisterController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "471bb00d-1ee1-4f47-8bc1-66be8128565e",
                "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl with valid req.body properties should call res with status 201 <number> and json {name: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
                "fullTitle": "Controllers: register.js ctrl with valid req.body properties should call res with status 201 <number> and json {name: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = userMock;\nuserModel.prototype.save.yields(null, userMock);\nregisterController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(201);\nexpect(resMock.json).to.have.been.calledWith(userMock);",
                "err": {},
                "isRoot": false,
                "uuid": "c9c3dd30-3c86-4080-add7-e053b4e05e0e",
                "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\controllers\\register.js",
            "uuid": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Controllers: register.js \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "userMock = helpers.USER_MODEL.MOCK();\nsinon.spy(resMock, 'status');\nsinon.spy(resMock, 'json');\nnextMock = sinon.spy();\nsinon.stub(userModel.prototype, 'save');",
                "err": {},
                "isRoot": false,
                "uuid": "a7e25edd-01d1-4e28-b41f-9c169b29dcf2",
                "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Controllers: register.js \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "resMock.status.restore();\nresMock.json.restore();\nnextMock = null;\nuserModel.prototype.save.restore();",
                "err": {},
                "isRoot": false,
                "uuid": "c3f0e43b-d4b6-4f1a-b044-f3dd154999ed",
                "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\controllers\\register.js",
            "passes": [
              {
                "title": "ctrl without req.body.firstName/email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
                "fullTitle": "Controllers: register.js ctrl without req.body.firstName/email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "registerController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: 'Request body do not have specified properties firstName, email or password.'\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6430cb99-7031-4dfb-b4c2-d913d10c044b",
                "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl with invalid req.body properties should call res with status 400 <number> and json {message: err.message} <object>",
                "fullTitle": "Controllers: register.js ctrl with invalid req.body properties should call res with status 400 <number> and json {message: err.message} <object>",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = userMock;\nuserModel.prototype.save.yields(errorsMock.validation);\nregisterController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: errorsMock.validation.message\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8602cf02-1989-4b0e-896a-aebebfeb3239",
                "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl in case of user.save() error should call next(err)",
                "fullTitle": "Controllers: register.js ctrl in case of user.save() error should call next(err)",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = userMock;\nuserModel.prototype.save.yields(errorsMock.normal);\nregisterController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "471bb00d-1ee1-4f47-8bc1-66be8128565e",
                "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ctrl with valid req.body properties should call res with status 201 <number> and json {name: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
                "fullTitle": "Controllers: register.js ctrl with valid req.body properties should call res with status 201 <number> and json {name: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "reqMock.body = userMock;\nuserModel.prototype.save.yields(null, userMock);\nregisterController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(201);\nexpect(resMock.json).to.have.been.calledWith(userMock);",
                "err": {},
                "isRoot": false,
                "uuid": "c9c3dd30-3c86-4080-add7-e053b4e05e0e",
                "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 14,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\controllers\\register.js",
        "uuid": "5e3368b4-5d0e-4339-b416-ac6c66c3ca29",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\controllers\\register.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Helpers: data-injector.js",
        "suites": [
          {
            "title": "Tests with required mongoose connection:",
            "suites": [],
            "tests": [
              {
                "title": "injection of the same data should return an object with property failure <array> which contains duplicate elements in database",
                "fullTitle": "Helpers: data-injector.js Tests with required mongoose connection: injection of the same data should return an object with property failure <array> which contains duplicate elements in database",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "dataInjector(routeModel, routes).then((results) => {\n    expect(results.failure.length).to.equal(routes.length);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "896201c7-cc87-401a-babb-2f4e97519c10",
                "parentUUID": "41f5ff78-f61a-4c39-b9c2-3363bde2ab41",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "injection of new data should return an object with property success <array> which contain newly added elements to database",
                "fullTitle": "Helpers: data-injector.js Tests with required mongoose connection: injection of new data should return an object with property success <array> which contain newly added elements to database",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const data = [\n    {\n        url: '/nowa-trasa0'\n    }, {\n        url: '/nowa-trasa1'\n    }\n];\ndataInjector(routeModel, data).then((results) => {\n    expect(results.success.length).to.equal(data.length);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "aa34caea-bf4b-4f7a-bbd3-85767b71c914",
                "parentUUID": "41f5ff78-f61a-4c39-b9c2-3363bde2ab41",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\helpers\\data-injector.js",
            "uuid": "41f5ff78-f61a-4c39-b9c2-3363bde2ab41",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Helpers: data-injector.js Tests with required mongoose connection: \"before all\" hook",
                "timedOut": false,
                "duration": 10,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "mongoose.connect(`mongodb://${helpers.MONGO_DB.USER}:${helpers.MONGO_DB.PASSDOWRD}@${helpers.MONGO_DB.HOST}:${helpers.MONGO_DB.PORT}/${helpers.MONGO_DB.NAME}`, helpers.MONGO_DB.OPTIONS, (err) => {\n    if (err) {\n        /* eslint-disable */\n        console.log(err.message);\n        /* eslint-enable */\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "be12aa2b-27d1-4d14-a0c6-df9dc6f38ba8",
                "parentUUID": "41f5ff78-f61a-4c39-b9c2-3363bde2ab41",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"before each\" hook",
                "fullTitle": "Helpers: data-injector.js Tests with required mongoose connection: \"before each\" hook",
                "timedOut": false,
                "duration": 23,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "routeModel = mongoose.models.Route ? mongoose.model('Route') : mongoose.model('Route', require('../../models/route').schema);\n/* eslint-disable */\ndataInjector(routeModel, routes).then((results) => {\n    done();\n}).catch((err) => {\n    console.log(err);\n    done();\n});\n/* eslint-enable */",
                "err": {},
                "isRoot": false,
                "uuid": "b1c75865-195d-40de-8e6e-7daf5067d63c",
                "parentUUID": "41f5ff78-f61a-4c39-b9c2-3363bde2ab41",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Helpers: data-injector.js Tests with required mongoose connection: \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "mongoose.connection.close().then(() => {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4a828855-a718-408b-931f-79fe91a11d8b",
                "parentUUID": "41f5ff78-f61a-4c39-b9c2-3363bde2ab41",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"after each\" hook",
                "fullTitle": "Helpers: data-injector.js Tests with required mongoose connection: \"after each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "routeModel.collection.drop().then(() => {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a961a5c0-ee61-4a87-8ac4-16738f03e7ff",
                "parentUUID": "41f5ff78-f61a-4c39-b9c2-3363bde2ab41",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\helpers\\data-injector.js",
            "passes": [
              {
                "title": "injection of the same data should return an object with property failure <array> which contains duplicate elements in database",
                "fullTitle": "Helpers: data-injector.js Tests with required mongoose connection: injection of the same data should return an object with property failure <array> which contains duplicate elements in database",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "dataInjector(routeModel, routes).then((results) => {\n    expect(results.failure.length).to.equal(routes.length);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "896201c7-cc87-401a-babb-2f4e97519c10",
                "parentUUID": "41f5ff78-f61a-4c39-b9c2-3363bde2ab41",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "injection of new data should return an object with property success <array> which contain newly added elements to database",
                "fullTitle": "Helpers: data-injector.js Tests with required mongoose connection: injection of new data should return an object with property success <array> which contain newly added elements to database",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const data = [\n    {\n        url: '/nowa-trasa0'\n    }, {\n        url: '/nowa-trasa1'\n    }\n];\ndataInjector(routeModel, data).then((results) => {\n    expect(results.success.length).to.equal(data.length);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "aa34caea-bf4b-4f7a-bbd3-85767b71c914",
                "parentUUID": "41f5ff78-f61a-4c39-b9c2-3363bde2ab41",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 21,
            "rootEmpty": false
          },
          {
            "title": "Tests without required mongoose connection:",
            "suites": [],
            "tests": [
              {
                "title": "is a function",
                "fullTitle": "Helpers: data-injector.js Tests without required mongoose connection: is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(dataInjector).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "167b6d03-13c8-45a4-8a13-b22d8ad0ffcd",
                "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without any arguments should return false",
                "fullTitle": "Helpers: data-injector.js Tests without required mongoose connection: without any arguments should return false",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "dataInjector().catch((err) => {\n    expect(err).to.be.false;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cafbaea6-f2fc-4f29-8194-5eba7f231b27",
                "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without required object property or argument model should return false",
                "fullTitle": "Helpers: data-injector.js Tests without required mongoose connection: without required object property or argument model should return false",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "dataInjector({\n    model: null,\n    array: routes\n}).catch((err) => {\n    expect(err).to.be.false;\n    dataInjector(null, routes).catch((err) => {\n        expect(err).to.be.false;\n        done();\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0708d494-b10d-45d1-ba5e-045e11c3a528",
                "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without required object property or argument array should return false",
                "fullTitle": "Helpers: data-injector.js Tests without required mongoose connection: without required object property or argument array should return false",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "dataInjector({\n    model: routeModel,\n    array: null\n}).catch((err) => {\n    expect(err).to.be.false;\n    dataInjector(routeModel, null).catch((err) => {\n        expect(err).to.be.false;\n        done();\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d842c5e3-a431-4e2e-a262-982f87f99a41",
                "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\helpers\\data-injector.js",
            "uuid": "b3ef3983-379b-48c8-a408-d678dba12ae2",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\helpers\\data-injector.js",
            "passes": [
              {
                "title": "is a function",
                "fullTitle": "Helpers: data-injector.js Tests without required mongoose connection: is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(dataInjector).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "167b6d03-13c8-45a4-8a13-b22d8ad0ffcd",
                "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without any arguments should return false",
                "fullTitle": "Helpers: data-injector.js Tests without required mongoose connection: without any arguments should return false",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "dataInjector().catch((err) => {\n    expect(err).to.be.false;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cafbaea6-f2fc-4f29-8194-5eba7f231b27",
                "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without required object property or argument model should return false",
                "fullTitle": "Helpers: data-injector.js Tests without required mongoose connection: without required object property or argument model should return false",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "dataInjector({\n    model: null,\n    array: routes\n}).catch((err) => {\n    expect(err).to.be.false;\n    dataInjector(null, routes).catch((err) => {\n        expect(err).to.be.false;\n        done();\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0708d494-b10d-45d1-ba5e-045e11c3a528",
                "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without required object property or argument array should return false",
                "fullTitle": "Helpers: data-injector.js Tests without required mongoose connection: without required object property or argument array should return false",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "dataInjector({\n    model: routeModel,\n    array: null\n}).catch((err) => {\n    expect(err).to.be.false;\n    dataInjector(routeModel, null).catch((err) => {\n        expect(err).to.be.false;\n        done();\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d842c5e3-a431-4e2e-a262-982f87f99a41",
                "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\helpers\\data-injector.js",
        "uuid": "7139c69a-3262-408f-8be8-80e8537ed2e5",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\helpers\\data-injector.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Helpers:",
        "suites": [
          {
            "title": "routes-injector.js",
            "suites": [],
            "tests": [
              {
                "title": "is a function",
                "fullTitle": "Helpers: routes-injector.js is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "69c2142d-a124-4f0c-bdad-8c3a3fa74201",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without any arguments should return false",
                "fullTitle": "Helpers: routes-injector.js without any arguments should return false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector()).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "ddfab7a0-1b62-4868-b628-ed2ef944556e",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "injection of correct data should return an object with property success <array> which contains newly added routes to application",
                "fullTitle": "Helpers: routes-injector.js injection of correct data should return an object with property success <array> which contains newly added routes to application",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector(app, routes).success.length).to.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "725a6192-acb2-4371-b9f0-ebeea3d7899b",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "injection of incorrect data should return an object with property incorrect <array> which contains incorrect routes",
                "fullTitle": "Helpers: routes-injector.js injection of incorrect data should return an object with property incorrect <array> which contains incorrect routes",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector(app, routes).incorrect.length).to.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "044169f4-e778-415e-a732-39c51d70ad54",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "injection of data causing error should return an object with property failure <array> which contains routes with errors",
                "fullTitle": "Helpers: routes-injector.js injection of data causing error should return an object with property failure <array> which contains routes with errors",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector(app, routes).failure.length).to.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "482840ef-8979-42d2-9e95-8876f7142938",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without required object property or argument appObj should return false",
                "fullTitle": "Helpers: routes-injector.js without required object property or argument appObj should return false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector({\n    appObj: null,\n    routesArr: routes\n})).to.be.false;\nexpect(routesInjector(null, routes)).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "c838f467-69d1-4cb8-9681-8c887b036f5f",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without required object property or argument routesArr should return false",
                "fullTitle": "Helpers: routes-injector.js without required object property or argument routesArr should return false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector({\n    appObj: app,\n    routesArr: null\n})).to.be.false;\nexpect(routesInjector(app, null)).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "290d9f73-9100-439a-94f2-28d69eba6739",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\helpers\\routes-injector.js",
            "uuid": "97de6576-e976-43e5-b18d-3547d2d76ec0",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Helpers: routes-injector.js \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "routeModel = mongoose.models.Route ? mongoose.model('Route') : mongoose.model('Route', require('../../models/route').schema);\n// Success\nroutes.push(new routeModel({\n    url: '/nowa-trasa0'\n}));\nroutes.push(new routeModel({\n    url: '/nowa-trasa1'\n}));\n// Incorrect\nroutes.push(new routeModel({\n    url: '/nowa-trasa0',\n    method: 'wrong' // <--- This method not supported by application\n}));\n// Failure\nroutes.push(new routeModel({\n    url: '/nowa-trasa0',\n    middlewares: 'wrong' // <--- This middleware not exist\n}));\nroutes.push(new routeModel({\n    url: '/nowa-trasa0',\n    controller: 'wrong' // <--- This controller not exist\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "04521926-382a-4412-b2e1-349feb4a94b1",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Helpers: routes-injector.js \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "routes.length = 0;",
                "err": {},
                "isRoot": false,
                "uuid": "ffe18a1e-dbed-450a-a9d7-74a2f64fbd1a",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\helpers\\routes-injector.js",
            "passes": [
              {
                "title": "is a function",
                "fullTitle": "Helpers: routes-injector.js is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "69c2142d-a124-4f0c-bdad-8c3a3fa74201",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without any arguments should return false",
                "fullTitle": "Helpers: routes-injector.js without any arguments should return false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector()).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "ddfab7a0-1b62-4868-b628-ed2ef944556e",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "injection of correct data should return an object with property success <array> which contains newly added routes to application",
                "fullTitle": "Helpers: routes-injector.js injection of correct data should return an object with property success <array> which contains newly added routes to application",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector(app, routes).success.length).to.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "725a6192-acb2-4371-b9f0-ebeea3d7899b",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "injection of incorrect data should return an object with property incorrect <array> which contains incorrect routes",
                "fullTitle": "Helpers: routes-injector.js injection of incorrect data should return an object with property incorrect <array> which contains incorrect routes",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector(app, routes).incorrect.length).to.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "044169f4-e778-415e-a732-39c51d70ad54",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "injection of data causing error should return an object with property failure <array> which contains routes with errors",
                "fullTitle": "Helpers: routes-injector.js injection of data causing error should return an object with property failure <array> which contains routes with errors",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector(app, routes).failure.length).to.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "482840ef-8979-42d2-9e95-8876f7142938",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without required object property or argument appObj should return false",
                "fullTitle": "Helpers: routes-injector.js without required object property or argument appObj should return false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector({\n    appObj: null,\n    routesArr: routes\n})).to.be.false;\nexpect(routesInjector(null, routes)).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "c838f467-69d1-4cb8-9681-8c887b036f5f",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without required object property or argument routesArr should return false",
                "fullTitle": "Helpers: routes-injector.js without required object property or argument routesArr should return false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routesInjector({\n    appObj: app,\n    routesArr: null\n})).to.be.false;\nexpect(routesInjector(app, null)).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "290d9f73-9100-439a-94f2-28d69eba6739",
                "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 7,
            "totalPasses": 7,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\helpers\\routes-injector.js",
        "uuid": "8c9b1d23-6ac9-45ef-81c3-d760a869033c",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\helpers\\routes-injector.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Middlewares:",
        "suites": [
          {
            "title": "default.js",
            "suites": [],
            "tests": [
              {
                "title": "is a function",
                "fullTitle": "Middlewares: default.js is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(defMiddleware).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "4b50a0fd-4c67-449b-8d73-67e7b8ee2162",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should accept only three arguments",
                "fullTitle": "Middlewares: default.js should accept only three arguments",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(defMiddleware.length).to.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "779d3142-de7d-4e20-bd3a-910787bfff0f",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call function next()",
                "fullTitle": "Middlewares: default.js should call function next()",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(nextMock).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "34d49761-41ee-4ab2-93fa-ef6610426721",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "req.createFullUrl is a function",
                "fullTitle": "Middlewares: default.js req.createFullUrl is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(reqMock.createFullUrl).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "ff11959b-22c8-45b5-ab56-05b624f684f6",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "req.createFullUrl(path) with path as string or number should return correct url value <string>",
                "fullTitle": "Middlewares: default.js req.createFullUrl(path) with path as string or number should return correct url value <string>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const stringMock = 'stringMock';\nconst numberMock = 100;\n// environment: unknown\n// string\nexpect(reqMock.createFullUrl(stringMock)).to.equal(`https://localhost-host/${stringMock}`);\n// number\nexpect(reqMock.createFullUrl(numberMock)).to.equal(`https://localhost-host/${numberMock}`);\n// both equal\nexpect(reqMock.createFullUrl(stringMock)).to.equal(reqMock.createFullUrl(`/${stringMock}`));\nexpect(reqMock.createFullUrl(numberMock)).to.equal(reqMock.createFullUrl(`/${numberMock}`));\n\n// environment: production\nprocess.env.NODE_ENV = 'production';\n// string\nexpect(reqMock.createFullUrl(stringMock)).to.equal(`https://localhost-hostname/${stringMock}`);\n// number\nexpect(reqMock.createFullUrl(numberMock)).to.equal(`https://localhost-hostname/${numberMock}`);\n// both equal\nexpect(reqMock.createFullUrl(stringMock)).to.equal(reqMock.createFullUrl(`/${stringMock}`));\nexpect(reqMock.createFullUrl(numberMock)).to.equal(reqMock.createFullUrl(`/${numberMock}`));\ndelete process.env.NODE_ENV;\n// is a string\nexpect(reqMock.createFullUrl(stringMock)).to.be.a('string');",
                "err": {},
                "isRoot": false,
                "uuid": "ec33d1d1-5878-49c9-96b8-ce2340e89776",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "res.redirectTo() should call res.redirect(status, path) correctly",
                "fullTitle": "Middlewares: default.js res.redirectTo() should call res.redirect(status, path) correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "resMock.redirectTo();\nexpect(resMock.redirect).to.have.been.calledWith(301, 'https://localhost-host');",
                "err": {},
                "isRoot": false,
                "uuid": "80b94898-1611-4b2b-9dfc-c044b6d12d60",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "res.redirectTo(path) should call res.redirect(status, path) correctly",
                "fullTitle": "Middlewares: default.js res.redirectTo(path) should call res.redirect(status, path) correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "resMock.redirectTo('en/dashboard');\nexpect(resMock.redirect).to.have.been.calledWith(301, 'https://localhost-host/en/dashboard');",
                "err": {},
                "isRoot": false,
                "uuid": "d9375b14-0dd2-4705-8de6-18ad446a0534",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "res.redirectTo(path, status) should call res.redirect(status, path) correctly",
                "fullTitle": "Middlewares: default.js res.redirectTo(path, status) should call res.redirect(status, path) correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "resMock.redirectTo('/en/dashboard', 302);\nexpect(resMock.redirect).to.have.been.calledWith(302, 'https://localhost-host/en/dashboard');",
                "err": {},
                "isRoot": false,
                "uuid": "73f7d7b5-d072-43dd-93e4-93e4cbfedae2",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\middlewares\\default.js",
            "uuid": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Middlewares: default.js \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sinon.spy(resMock, 'redirect');\nnextMock = sinon.spy();\ndefMiddleware(reqMock, resMock, nextMock);",
                "err": {},
                "isRoot": false,
                "uuid": "f9bd1911-018b-4239-b562-970a8e139cc7",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Middlewares: default.js \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "resMock.redirect.restore();\nnextMock = null;",
                "err": {},
                "isRoot": false,
                "uuid": "9ede1f7d-14ba-4538-b4f1-b133789fc665",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\middlewares\\default.js",
            "passes": [
              {
                "title": "is a function",
                "fullTitle": "Middlewares: default.js is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(defMiddleware).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "4b50a0fd-4c67-449b-8d73-67e7b8ee2162",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should accept only three arguments",
                "fullTitle": "Middlewares: default.js should accept only three arguments",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(defMiddleware.length).to.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "779d3142-de7d-4e20-bd3a-910787bfff0f",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call function next()",
                "fullTitle": "Middlewares: default.js should call function next()",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(nextMock).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "34d49761-41ee-4ab2-93fa-ef6610426721",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "req.createFullUrl is a function",
                "fullTitle": "Middlewares: default.js req.createFullUrl is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(reqMock.createFullUrl).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "ff11959b-22c8-45b5-ab56-05b624f684f6",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "req.createFullUrl(path) with path as string or number should return correct url value <string>",
                "fullTitle": "Middlewares: default.js req.createFullUrl(path) with path as string or number should return correct url value <string>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const stringMock = 'stringMock';\nconst numberMock = 100;\n// environment: unknown\n// string\nexpect(reqMock.createFullUrl(stringMock)).to.equal(`https://localhost-host/${stringMock}`);\n// number\nexpect(reqMock.createFullUrl(numberMock)).to.equal(`https://localhost-host/${numberMock}`);\n// both equal\nexpect(reqMock.createFullUrl(stringMock)).to.equal(reqMock.createFullUrl(`/${stringMock}`));\nexpect(reqMock.createFullUrl(numberMock)).to.equal(reqMock.createFullUrl(`/${numberMock}`));\n\n// environment: production\nprocess.env.NODE_ENV = 'production';\n// string\nexpect(reqMock.createFullUrl(stringMock)).to.equal(`https://localhost-hostname/${stringMock}`);\n// number\nexpect(reqMock.createFullUrl(numberMock)).to.equal(`https://localhost-hostname/${numberMock}`);\n// both equal\nexpect(reqMock.createFullUrl(stringMock)).to.equal(reqMock.createFullUrl(`/${stringMock}`));\nexpect(reqMock.createFullUrl(numberMock)).to.equal(reqMock.createFullUrl(`/${numberMock}`));\ndelete process.env.NODE_ENV;\n// is a string\nexpect(reqMock.createFullUrl(stringMock)).to.be.a('string');",
                "err": {},
                "isRoot": false,
                "uuid": "ec33d1d1-5878-49c9-96b8-ce2340e89776",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "res.redirectTo() should call res.redirect(status, path) correctly",
                "fullTitle": "Middlewares: default.js res.redirectTo() should call res.redirect(status, path) correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "resMock.redirectTo();\nexpect(resMock.redirect).to.have.been.calledWith(301, 'https://localhost-host');",
                "err": {},
                "isRoot": false,
                "uuid": "80b94898-1611-4b2b-9dfc-c044b6d12d60",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "res.redirectTo(path) should call res.redirect(status, path) correctly",
                "fullTitle": "Middlewares: default.js res.redirectTo(path) should call res.redirect(status, path) correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "resMock.redirectTo('en/dashboard');\nexpect(resMock.redirect).to.have.been.calledWith(301, 'https://localhost-host/en/dashboard');",
                "err": {},
                "isRoot": false,
                "uuid": "d9375b14-0dd2-4705-8de6-18ad446a0534",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "res.redirectTo(path, status) should call res.redirect(status, path) correctly",
                "fullTitle": "Middlewares: default.js res.redirectTo(path, status) should call res.redirect(status, path) correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "resMock.redirectTo('/en/dashboard', 302);\nexpect(resMock.redirect).to.have.been.calledWith(302, 'https://localhost-host/en/dashboard');",
                "err": {},
                "isRoot": false,
                "uuid": "73f7d7b5-d072-43dd-93e4-93e4cbfedae2",
                "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 8,
            "totalPasses": 8,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\middlewares\\default.js",
        "uuid": "da50d763-2634-4bf4-b4b5-22fc8b8e0f25",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\middlewares\\default.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Middlewares:",
        "suites": [
          {
            "title": "ensureAuthentication.js",
            "suites": [],
            "tests": [
              {
                "title": "without request authorization header should call res with status 401 <number> and json {message: \"Please make...\"} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js without request authorization header should call res with status 401 <number> and json {message: \"Please make...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "delete reqMock.headers.authorization;\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith({\n    message: 'Please make sure your request has an Authorization header.'\n});",
                "err": {},
                "isRoot": false,
                "uuid": "af60d308-5ea0-45af-9604-06ebc869dbce",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with authorization token which throws an exception should call res with status 401 <number> and json {message: err.message} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js with authorization token which throws an exception should call res with status 401 <number> and json {message: err.message} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "tokenHandler.decode.throws(errorsMock.normal);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "5ec5c072-0202-4278-8f73-38a72a1b979a",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with a not compatible device which sent request to token.payload.device should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js with a not compatible device which sent request to token.payload.device should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "delete tokenHandlerMock.payload.device;\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
                "err": {},
                "isRoot": false,
                "uuid": "7342780a-587d-425a-88a4-0a1f122c9b3b",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "in case of error userModel.find() method should call next(err)",
                "fullTitle": "Middlewares: ensureAuthentication.js in case of error userModel.find() method should call next(err)",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userModel.find.yields(errorsMock.normal);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "26701c5f-22e4-4621-b6f2-51b62a7c83d1",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "in case of no user is found should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js in case of no user is found should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userModel.find.yields(null, []);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
                "err": {},
                "isRoot": false,
                "uuid": "a597a557-4c1b-4422-afad-9459e009378d",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with valid and active token should add property user to req",
                "fullTitle": "Middlewares: ensureAuthentication.js with valid and active token should add property user to req",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\ntokenHandlerMock.v = true;\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(reqMock.user).to.deep.equal(userMock);",
                "err": {},
                "isRoot": false,
                "uuid": "bcbf2382-d0d3-4172-817f-3ed3480c2b10",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "in case of expired or inactive token should call res with status 401 <number> and json {message: \"Your token...\"} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js in case of expired or inactive token should call res with status 401 <number> and json {message: \"Your token...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.expires);",
                "err": {},
                "isRoot": false,
                "uuid": "15a44f73-eb7a-41e9-974c-08b8deabebc0",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove expired token which is still assigned to user.active_tokens property and call res with status 401 <number> and json {message: \"Your token...\"} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js should remove expired token which is still assigned to user.active_tokens property and call res with status 401 <number> and json {message: \"Your token...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(userMock.active_tokens).to.be.empty;\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.expires);",
                "err": {},
                "isRoot": false,
                "uuid": "145be2a6-47bb-4cf0-a33e-32a118b401d2",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "in case of error user.save() method should call next(err)",
                "fullTitle": "Middlewares: ensureAuthentication.js in case of error user.save() method should call next(err)",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\nuserMock.errSave = errorsMock.normal;\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "660656e6-893c-40fc-8b14-aa568e526619",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "in case of ValidationError user.save() method should call res with status 400 <number> and json {message: err.message} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js in case of ValidationError user.save() method should call res with status 400 <number> and json {message: err.message} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\nuserMock.errSave = errorsMock.validation;\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: errorsMock.validation.message\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4c89c5b0-e925-480e-a50e-15d0effe1ede",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\middlewares\\ensure-authentication.js",
            "uuid": "42e04699-5748-4941-8843-41651af0f53a",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Middlewares: ensureAuthentication.js \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "reqMock = nodeMocksHttp.createRequest({\n    headers: {\n        'authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE0OTUwMjkzMjgsImV4cCI6MTQ5NTYzNDEyOCwic3ViIjoiNTkxYzU2NTA0ZGQ5NTYzNTdjYWJkNjFkIiwiZW1haWwiOiJhQGFhIiwiZGV2aWNlIjoiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTYuMC4yOTI0Ljc2IFNhZmFyaS81MzcuMzYifQ.52fiD8ylZE-bRHpnp-PoRIJP4VsfoVy3xEXZsNugZNY',\n        'user-agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36'\n    }\n});\nuserMock = helpers.USER_MODEL.MOCK();\nsinon.spy(resMock, 'status');\nsinon.spy(resMock, 'json');\nnextMock = sinon.spy();\ntokenHandlerMock = helpers.TOKEN_HANDLER.MOCK(reqMock);\nsinon.stub(tokenHandler, 'decode').returns(tokenHandlerMock);\nsinon.stub(userModel, 'find');",
                "err": {},
                "isRoot": false,
                "uuid": "be518fa1-0707-43d5-bf4b-f584786745a9",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Middlewares: ensureAuthentication.js \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "resMock.status.restore();\nresMock.json.restore();\nnextMock = null;\ntokenHandler.decode.restore();\nuserModel.find.restore();",
                "err": {},
                "isRoot": false,
                "uuid": "18073861-7859-4c00-ac40-b01ed65cb669",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\middlewares\\ensure-authentication.js",
            "passes": [
              {
                "title": "without request authorization header should call res with status 401 <number> and json {message: \"Please make...\"} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js without request authorization header should call res with status 401 <number> and json {message: \"Please make...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "delete reqMock.headers.authorization;\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith({\n    message: 'Please make sure your request has an Authorization header.'\n});",
                "err": {},
                "isRoot": false,
                "uuid": "af60d308-5ea0-45af-9604-06ebc869dbce",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with authorization token which throws an exception should call res with status 401 <number> and json {message: err.message} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js with authorization token which throws an exception should call res with status 401 <number> and json {message: err.message} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "tokenHandler.decode.throws(errorsMock.normal);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "5ec5c072-0202-4278-8f73-38a72a1b979a",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with a not compatible device which sent request to token.payload.device should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js with a not compatible device which sent request to token.payload.device should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "delete tokenHandlerMock.payload.device;\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
                "err": {},
                "isRoot": false,
                "uuid": "7342780a-587d-425a-88a4-0a1f122c9b3b",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "in case of error userModel.find() method should call next(err)",
                "fullTitle": "Middlewares: ensureAuthentication.js in case of error userModel.find() method should call next(err)",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userModel.find.yields(errorsMock.normal);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "26701c5f-22e4-4621-b6f2-51b62a7c83d1",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "in case of no user is found should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js in case of no user is found should call res with status 401 <number> and json {message: \"You are...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userModel.find.yields(null, []);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
                "err": {},
                "isRoot": false,
                "uuid": "a597a557-4c1b-4422-afad-9459e009378d",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with valid and active token should add property user to req",
                "fullTitle": "Middlewares: ensureAuthentication.js with valid and active token should add property user to req",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\ntokenHandlerMock.v = true;\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(reqMock.user).to.deep.equal(userMock);",
                "err": {},
                "isRoot": false,
                "uuid": "bcbf2382-d0d3-4172-817f-3ed3480c2b10",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "in case of expired or inactive token should call res with status 401 <number> and json {message: \"Your token...\"} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js in case of expired or inactive token should call res with status 401 <number> and json {message: \"Your token...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.expires);",
                "err": {},
                "isRoot": false,
                "uuid": "15a44f73-eb7a-41e9-974c-08b8deabebc0",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove expired token which is still assigned to user.active_tokens property and call res with status 401 <number> and json {message: \"Your token...\"} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js should remove expired token which is still assigned to user.active_tokens property and call res with status 401 <number> and json {message: \"Your token...\"} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(userMock.active_tokens).to.be.empty;\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.expires);",
                "err": {},
                "isRoot": false,
                "uuid": "145be2a6-47bb-4cf0-a33e-32a118b401d2",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "in case of error user.save() method should call next(err)",
                "fullTitle": "Middlewares: ensureAuthentication.js in case of error user.save() method should call next(err)",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\nuserMock.errSave = errorsMock.normal;\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
                "err": {},
                "isRoot": false,
                "uuid": "660656e6-893c-40fc-8b14-aa568e526619",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "in case of ValidationError user.save() method should call res with status 400 <number> and json {message: err.message} <object>",
                "fullTitle": "Middlewares: ensureAuthentication.js in case of ValidationError user.save() method should call res with status 400 <number> and json {message: err.message} <object>",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\nuserMock.errSave = errorsMock.validation;\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: errorsMock.validation.message\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4c89c5b0-e925-480e-a50e-15d0effe1ede",
                "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 10,
            "totalPasses": 10,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\middlewares\\ensure-authentication.js",
        "uuid": "68f3b8da-ca88-44cf-a342-6c1f7b65af34",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\middlewares\\ensure-authentication.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Middlewares:",
        "suites": [
          {
            "title": "language.js",
            "suites": [],
            "tests": [
              {
                "title": "is a function",
                "fullTitle": "Middlewares: language.js is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(language).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "6775b12a-44ff-4cf8-802e-05d4c9e5a47d",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should accept only three arguments",
                "fullTitle": "Middlewares: language.js should accept only three arguments",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(language.length).to.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "ce464338-b794-4185-b8dd-c8e0bd572951",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call function next()",
                "fullTitle": "Middlewares: language.js should call function next()",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(nextMock).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "558139dc-f05b-4aca-8fb8-9b2f09ff0ab2",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with wrong language param req.lang.value should return default value: pl",
                "fullTitle": "Middlewares: language.js with wrong language param req.lang.value should return default value: pl",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(reqMock.lang.value).to.equal(PAGES_CONFIG.LANGUAGES[0]);",
                "err": {},
                "isRoot": false,
                "uuid": "d846900d-f29c-43ab-bd71-811a2bfc7e8d",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with \"pl\" language param req.lang.value should return \"pl\"",
                "fullTitle": "Middlewares: language.js with \"pl\" language param req.lang.value should return \"pl\"",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const reqMockPL = nodeMocksHttp.createRequest({\n    params: {\n        lang: 'pl'\n    }\n});\nlanguage(reqMockPL, resMock, nextMock);\nexpect(reqMockPL.lang.value).to.equal('pl');",
                "err": {},
                "isRoot": false,
                "uuid": "4e5311ca-b9c9-4958-bdec-7d58ceea8e6f",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with \"en\" language param req.lang.value should return \"en\"",
                "fullTitle": "Middlewares: language.js with \"en\" language param req.lang.value should return \"en\"",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const reqMockEN = nodeMocksHttp.createRequest({\n    params: {\n        lang: 'en'\n    }\n});\nlanguage(reqMockEN, resMock, nextMock);\nexpect(reqMockEN.lang.value).to.equal('en');",
                "err": {},
                "isRoot": false,
                "uuid": "ca33c107-0196-4620-8053-f207955eef55",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with any language param req.lang.exist should return true",
                "fullTitle": "Middlewares: language.js with any language param req.lang.exist should return true",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const reqMockANY = nodeMocksHttp.createRequest({\n    params: {\n        lang: 'plpl'\n    }\n});\nlanguage(reqMockANY, resMock, nextMock);\nexpect(reqMockANY.lang.exist).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "d0be97e1-0eb9-41e9-9d78-102bf0c99d31",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without language param req.lang.exist should return false",
                "fullTitle": "Middlewares: language.js without language param req.lang.exist should return false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(reqMock.lang.exist).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "445bc823-865e-4786-9313-86209af3996a",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\middlewares\\language.js",
            "uuid": "7dc761b3-248b-4518-a670-2a931b65df57",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Middlewares: language.js \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "nextMock = sinon.spy();\nlanguage(reqMock, resMock, nextMock);",
                "err": {},
                "isRoot": false,
                "uuid": "32a04fef-e06b-45c2-bbd4-a8caf39a4022",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Middlewares: language.js \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "nextMock = null;",
                "err": {},
                "isRoot": false,
                "uuid": "4143bd5c-ee0e-44c5-97bc-daad334dc197",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\middlewares\\language.js",
            "passes": [
              {
                "title": "is a function",
                "fullTitle": "Middlewares: language.js is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(language).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "6775b12a-44ff-4cf8-802e-05d4c9e5a47d",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should accept only three arguments",
                "fullTitle": "Middlewares: language.js should accept only three arguments",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(language.length).to.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "ce464338-b794-4185-b8dd-c8e0bd572951",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call function next()",
                "fullTitle": "Middlewares: language.js should call function next()",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(nextMock).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "558139dc-f05b-4aca-8fb8-9b2f09ff0ab2",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with wrong language param req.lang.value should return default value: pl",
                "fullTitle": "Middlewares: language.js with wrong language param req.lang.value should return default value: pl",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(reqMock.lang.value).to.equal(PAGES_CONFIG.LANGUAGES[0]);",
                "err": {},
                "isRoot": false,
                "uuid": "d846900d-f29c-43ab-bd71-811a2bfc7e8d",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with \"pl\" language param req.lang.value should return \"pl\"",
                "fullTitle": "Middlewares: language.js with \"pl\" language param req.lang.value should return \"pl\"",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const reqMockPL = nodeMocksHttp.createRequest({\n    params: {\n        lang: 'pl'\n    }\n});\nlanguage(reqMockPL, resMock, nextMock);\nexpect(reqMockPL.lang.value).to.equal('pl');",
                "err": {},
                "isRoot": false,
                "uuid": "4e5311ca-b9c9-4958-bdec-7d58ceea8e6f",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with \"en\" language param req.lang.value should return \"en\"",
                "fullTitle": "Middlewares: language.js with \"en\" language param req.lang.value should return \"en\"",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const reqMockEN = nodeMocksHttp.createRequest({\n    params: {\n        lang: 'en'\n    }\n});\nlanguage(reqMockEN, resMock, nextMock);\nexpect(reqMockEN.lang.value).to.equal('en');",
                "err": {},
                "isRoot": false,
                "uuid": "ca33c107-0196-4620-8053-f207955eef55",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with any language param req.lang.exist should return true",
                "fullTitle": "Middlewares: language.js with any language param req.lang.exist should return true",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const reqMockANY = nodeMocksHttp.createRequest({\n    params: {\n        lang: 'plpl'\n    }\n});\nlanguage(reqMockANY, resMock, nextMock);\nexpect(reqMockANY.lang.exist).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "d0be97e1-0eb9-41e9-9d78-102bf0c99d31",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without language param req.lang.exist should return false",
                "fullTitle": "Middlewares: language.js without language param req.lang.exist should return false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(reqMock.lang.exist).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "445bc823-865e-4786-9313-86209af3996a",
                "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 8,
            "totalPasses": 8,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\middlewares\\language.js",
        "uuid": "e4473dee-5701-42aa-9e92-9f276a4ae66f",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\middlewares\\language.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Middlewares:",
        "suites": [
          {
            "title": "middlewares.js",
            "suites": [],
            "tests": [
              {
                "title": "is an instance of an array",
                "fullTitle": "Middlewares: middlewares.js is an instance of an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(middlewares).to.be.an.instanceof(Array);",
                "err": {},
                "isRoot": false,
                "uuid": "3cc830ff-7ce0-4407-8bc8-4d7b10e55ad7",
                "parentUUID": "78d03cc8-af64-426d-8ed1-d72e27ccad95",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "an array should contain only functions",
                "fullTitle": "Middlewares: middlewares.js an array should contain only functions",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "middlewares.forEach((elem) => {\n                expect(elem).to.be.a('function');\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "df46e1ac-56c7-4245-ab87-926e804bea80",
                "parentUUID": "78d03cc8-af64-426d-8ed1-d72e27ccad95",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\middlewares\\middlewares.js",
            "uuid": "78d03cc8-af64-426d-8ed1-d72e27ccad95",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\middlewares\\middlewares.js",
            "passes": [
              {
                "title": "is an instance of an array",
                "fullTitle": "Middlewares: middlewares.js is an instance of an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(middlewares).to.be.an.instanceof(Array);",
                "err": {},
                "isRoot": false,
                "uuid": "3cc830ff-7ce0-4407-8bc8-4d7b10e55ad7",
                "parentUUID": "78d03cc8-af64-426d-8ed1-d72e27ccad95",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "an array should contain only functions",
                "fullTitle": "Middlewares: middlewares.js an array should contain only functions",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "middlewares.forEach((elem) => {\n                expect(elem).to.be.a('function');\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "df46e1ac-56c7-4245-ab87-926e804bea80",
                "parentUUID": "78d03cc8-af64-426d-8ed1-d72e27ccad95",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\middlewares\\middlewares.js",
        "uuid": "41c30929-e24a-44a3-a1d4-49e41e8adf15",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\middlewares\\middlewares.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Models: page.js",
        "suites": [
          {
            "title": "Tests with required mongoose connection:",
            "suites": [],
            "tests": [
              {
                "title": "method find should return an array with one object",
                "fullTitle": "Models: page.js Tests with required mongoose connection: method find should return an array with one object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "pageModel.find(helpers.PAGE_MODEL.EXAMPLE_DATA, (err, results) => {\n    if (results.length !== 1) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5dd0bc76-05b1-4623-98b6-eaf88fe1e817",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method save on object with the same property name should return an error",
                "fullTitle": "Models: page.js Tests with required mongoose connection: method save on object with the same property name should return an error",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const page = new pageModel({\n    name: 'test',\n    url: '/test1',\n    fileName: 'test1'\n});\n/* eslint-disable */\npage.save((err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "10e28ae3-97fc-4bfd-8597-244a70d7c110",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method save on object with the same property url should return an error",
                "fullTitle": "Models: page.js Tests with required mongoose connection: method save on object with the same property url should return an error",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const page = new pageModel({\n    name: 'test1',\n    url: '/test',\n    fileName: 'test1'\n});\n/* eslint-disable */\npage.save((err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1c14813b-9181-4baa-b90e-40a82bce8d58",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "page model constructor without required object properties name, url or fileName should return an error",
                "fullTitle": "Models: page.js Tests with required mongoose connection: page model constructor without required object properties name, url or fileName should return an error",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "pageModel.create({\n    url: '/test',\n    fileName: 'test'\n    /* eslint-disable */\n}, (err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n});\npageModel.create({\n    name: 'test',\n    fileName: 'test'\n    /* eslint-disable */\n}, (err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n});\npageModel.create({\n    name: 'test',\n    url: '/test'\n    /* eslint-disable */\n}, (err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "493cb8d8-42ee-4311-8462-3f4da00fcd95",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new page object created only with required object properties name, url and fileName should return correct object",
                "fullTitle": "Models: page.js Tests with required mongoose connection: new page object created only with required object properties name, url and fileName should return correct object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const pageEqual = {\n    name: page.name,\n    url: page.url,\n    statusCode: page.statusCode,\n    fileName: page.fileName,\n    type: page.type,\n    redirect: {\n        statusCode: page.redirect.statusCode,\n        type: page.redirect.type,\n        name: page.redirect.name,\n        url: page.redirect.url\n    },\n    root: page.root\n};\nexpect(pageEqual).to.deep.equal(helpers.PAGE_MODEL.EQUAL_PAGE);",
                "err": {},
                "isRoot": false,
                "uuid": "7638f958-1730-4c2a-97e3-da6b13823073",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\models\\page.js",
            "uuid": "39499545-7a87-40d2-83ee-1d841808a6d1",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Models: page.js Tests with required mongoose connection: \"before all\" hook",
                "timedOut": false,
                "duration": 8,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "mongoose.connect(`mongodb://${helpers.MONGO_DB.USER}:${helpers.MONGO_DB.PASSDOWRD}@${helpers.MONGO_DB.HOST}:${helpers.MONGO_DB.PORT}/${helpers.MONGO_DB.NAME}`, helpers.MONGO_DB.OPTIONS, (err) => {\n    if (err) {\n        /* eslint-disable */\n        console.log(err.message);\n        /* eslint-enable */\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6608ffa8-2b19-4412-9154-9719117b29cd",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"before each\" hook",
                "fullTitle": "Models: page.js Tests with required mongoose connection: \"before each\" hook",
                "timedOut": false,
                "duration": 8,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "pageModel = mongoose.models.Page ? mongoose.model('Page') : mongoose.model('Page', require('../../models/page').schema);\npage = new pageModel(helpers.PAGE_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\npage.save((err, page) => {\n    if (err) {\n        console.log(err.message);\n        /* eslint-enable */\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "81072acb-8378-43f8-98a8-31f5e4e3572f",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Models: page.js Tests with required mongoose connection: \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "mongoose.connection.close().then(() => {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "039f7163-507b-4b70-a2ba-8e61b711512e",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"after each\" hook",
                "fullTitle": "Models: page.js Tests with required mongoose connection: \"after each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "pageModel.collection.drop().then(() => {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "783b02c5-00af-42de-bbdd-c7842e4e509e",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\models\\page.js",
            "passes": [
              {
                "title": "method find should return an array with one object",
                "fullTitle": "Models: page.js Tests with required mongoose connection: method find should return an array with one object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "pageModel.find(helpers.PAGE_MODEL.EXAMPLE_DATA, (err, results) => {\n    if (results.length !== 1) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5dd0bc76-05b1-4623-98b6-eaf88fe1e817",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method save on object with the same property name should return an error",
                "fullTitle": "Models: page.js Tests with required mongoose connection: method save on object with the same property name should return an error",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const page = new pageModel({\n    name: 'test',\n    url: '/test1',\n    fileName: 'test1'\n});\n/* eslint-disable */\npage.save((err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "10e28ae3-97fc-4bfd-8597-244a70d7c110",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method save on object with the same property url should return an error",
                "fullTitle": "Models: page.js Tests with required mongoose connection: method save on object with the same property url should return an error",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const page = new pageModel({\n    name: 'test1',\n    url: '/test',\n    fileName: 'test1'\n});\n/* eslint-disable */\npage.save((err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1c14813b-9181-4baa-b90e-40a82bce8d58",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "page model constructor without required object properties name, url or fileName should return an error",
                "fullTitle": "Models: page.js Tests with required mongoose connection: page model constructor without required object properties name, url or fileName should return an error",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "pageModel.create({\n    url: '/test',\n    fileName: 'test'\n    /* eslint-disable */\n}, (err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n});\npageModel.create({\n    name: 'test',\n    fileName: 'test'\n    /* eslint-disable */\n}, (err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n});\npageModel.create({\n    name: 'test',\n    url: '/test'\n    /* eslint-disable */\n}, (err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "493cb8d8-42ee-4311-8462-3f4da00fcd95",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new page object created only with required object properties name, url and fileName should return correct object",
                "fullTitle": "Models: page.js Tests with required mongoose connection: new page object created only with required object properties name, url and fileName should return correct object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const pageEqual = {\n    name: page.name,\n    url: page.url,\n    statusCode: page.statusCode,\n    fileName: page.fileName,\n    type: page.type,\n    redirect: {\n        statusCode: page.redirect.statusCode,\n        type: page.redirect.type,\n        name: page.redirect.name,\n        url: page.redirect.url\n    },\n    root: page.root\n};\nexpect(pageEqual).to.deep.equal(helpers.PAGE_MODEL.EQUAL_PAGE);",
                "err": {},
                "isRoot": false,
                "uuid": "7638f958-1730-4c2a-97e3-da6b13823073",
                "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 12,
            "rootEmpty": false
          },
          {
            "title": "Tests without required mongoose connection:",
            "suites": [],
            "tests": [
              {
                "title": "is a function",
                "fullTitle": "Models: page.js Tests without required mongoose connection: is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(pageModel).to.be.a('function');\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "ca633e70-83f9-4b97-9db8-1cd119433202",
                "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new page object created with all random object properties should return correct object",
                "fullTitle": "Models: page.js Tests without required mongoose connection: new page object created with all random object properties should return correct object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const pageEqual = {\n    name: page.name,\n    url: page.url,\n    statusCode: page.statusCode,\n    fileName: page.fileName,\n    type: page.type,\n    redirect: {\n        statusCode: page.redirect.statusCode,\n        type: page.redirect.type,\n        name: page.redirect.name,\n        url: page.redirect.url\n    },\n    root: page.root\n};\nexpect(pageEqual).to.deep.equal(helpers.PAGE_MODEL.RANDOM_EQUAL_PAGE);",
                "err": {},
                "isRoot": false,
                "uuid": "10b5a514-f8ab-452f-ab2b-f8865565fbcb",
                "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method fullUrl should return full url with language param: /pl/test",
                "fullTitle": "Models: page.js Tests without required mongoose connection: method fullUrl should return full url with language param: /pl/test",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(page.fullUrl('pl')).to.equal('/pl/404');",
                "err": {},
                "isRoot": false,
                "uuid": "01e7ac91-344b-4a2d-8179-e3cc3ae95ea1",
                "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method fullFileName should return full file name with language suffix (-pl) and extension (.html): test-pl.html",
                "fullTitle": "Models: page.js Tests without required mongoose connection: method fullFileName should return full file name with language suffix (-pl) and extension (.html): test-pl.html",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(page.fullFileName('pl')).to.equal('404-pl.html');",
                "err": {},
                "isRoot": false,
                "uuid": "c47c2261-98da-4737-948f-5718affa0216",
                "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\models\\page.js",
            "uuid": "6b1c1a7a-567c-4749-b256-839e0016251f",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Models: page.js Tests without required mongoose connection: \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "page = new pageModel(helpers.PAGE_MODEL.RANDOM_EQUAL_PAGE);",
                "err": {},
                "isRoot": false,
                "uuid": "9d528a39-1642-484a-b5d3-ce1c6d1e062a",
                "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\models\\page.js",
            "passes": [
              {
                "title": "is a function",
                "fullTitle": "Models: page.js Tests without required mongoose connection: is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(pageModel).to.be.a('function');\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "ca633e70-83f9-4b97-9db8-1cd119433202",
                "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new page object created with all random object properties should return correct object",
                "fullTitle": "Models: page.js Tests without required mongoose connection: new page object created with all random object properties should return correct object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const pageEqual = {\n    name: page.name,\n    url: page.url,\n    statusCode: page.statusCode,\n    fileName: page.fileName,\n    type: page.type,\n    redirect: {\n        statusCode: page.redirect.statusCode,\n        type: page.redirect.type,\n        name: page.redirect.name,\n        url: page.redirect.url\n    },\n    root: page.root\n};\nexpect(pageEqual).to.deep.equal(helpers.PAGE_MODEL.RANDOM_EQUAL_PAGE);",
                "err": {},
                "isRoot": false,
                "uuid": "10b5a514-f8ab-452f-ab2b-f8865565fbcb",
                "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method fullUrl should return full url with language param: /pl/test",
                "fullTitle": "Models: page.js Tests without required mongoose connection: method fullUrl should return full url with language param: /pl/test",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(page.fullUrl('pl')).to.equal('/pl/404');",
                "err": {},
                "isRoot": false,
                "uuid": "01e7ac91-344b-4a2d-8179-e3cc3ae95ea1",
                "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method fullFileName should return full file name with language suffix (-pl) and extension (.html): test-pl.html",
                "fullTitle": "Models: page.js Tests without required mongoose connection: method fullFileName should return full file name with language suffix (-pl) and extension (.html): test-pl.html",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(page.fullFileName('pl')).to.equal('404-pl.html');",
                "err": {},
                "isRoot": false,
                "uuid": "c47c2261-98da-4737-948f-5718affa0216",
                "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\models\\page.js",
        "uuid": "9e4fe8c5-a887-4971-83f9-70607cd27608",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\models\\page.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Models: route.js",
        "suites": [
          {
            "title": "Tests with required mongoose connection:",
            "suites": [],
            "tests": [
              {
                "title": "method find should return an array with one object",
                "fullTitle": "Models: route.js Tests with required mongoose connection: method find should return an array with one object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "routeModel.find(helpers.ROUTE_MODEL.EXAMPLE_DATA, (err, results) => {\n                if (results.length !== 1) {\n                    throw Error('Something went wrong!');\n                }\n                done();\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "003d481b-73f6-44db-ad90-5e7b82e30bc6",
                "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method save on object with the same property url should return an error",
                "fullTitle": "Models: route.js Tests with required mongoose connection: method save on object with the same property url should return an error",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const route = new routeModel(helpers.ROUTE_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\nroute.save((err, route) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "03e02771-9c38-4147-aeb3-7f90f9693f71",
                "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "route model constructor without required object property url should return an error",
                "fullTitle": "Models: route.js Tests with required mongoose connection: route model constructor without required object property url should return an error",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/* eslint-disable */\nrouteModel.create({}, (err, route) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a2f15406-4566-409b-ab83-b57acd144637",
                "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new route object created only with required object property url should return correct object",
                "fullTitle": "Models: route.js Tests with required mongoose connection: new route object created only with required object property url should return correct object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const routeEqual = {\n    url: route.url,\n    method: route.method,\n    controller: route.controller\n};\nexpect(routeEqual).to.deep.equal(helpers.ROUTE_MODEL.EQUAL_ROUTE);",
                "err": {},
                "isRoot": false,
                "uuid": "0e5f6778-fc98-4a9c-a5bc-42da2b6961f9",
                "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\models\\route.js",
            "uuid": "01d6d39c-fb74-4838-aff0-864db4019111",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Models: route.js Tests with required mongoose connection: \"before all\" hook",
                "timedOut": false,
                "duration": 4,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "mongoose.connect(`mongodb://${helpers.MONGO_DB.USER}:${helpers.MONGO_DB.PASSDOWRD}@${helpers.MONGO_DB.HOST}:${helpers.MONGO_DB.PORT}/${helpers.MONGO_DB.NAME}`, helpers.MONGO_DB.OPTIONS, (err) => {\n    if (err) {\n        /* eslint-disable */\n        console.log(err.message);\n        /* eslint-enable */\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "98aad1ff-9584-49a6-8f1d-16710609938f",
                "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"before all\" hook",
                "fullTitle": "Models: route.js Tests with required mongoose connection: \"before all\" hook",
                "timedOut": false,
                "duration": 18,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "routeModel = mongoose.models.Route ? mongoose.model('Route') : mongoose.model('Route', require('../../models/route').schema);\nroute = new routeModel(helpers.ROUTE_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\nroute.save((err, route) => {\n    if (err) {\n        console.log(err.message);\n        /* eslint-enable */\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1aafce2b-0295-4799-97df-595e95fc7986",
                "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Models: route.js Tests with required mongoose connection: \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "routeModel.collection.drop().then(() => {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a9eb19e1-1caf-4e83-a040-25a3ad28a262",
                "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"after all\" hook",
                "fullTitle": "Models: route.js Tests with required mongoose connection: \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "mongoose.connection.close().then(() => {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5ff44a5a-85c5-432b-9142-7eb758e79c3a",
                "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\models\\route.js",
            "passes": [
              {
                "title": "method find should return an array with one object",
                "fullTitle": "Models: route.js Tests with required mongoose connection: method find should return an array with one object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "routeModel.find(helpers.ROUTE_MODEL.EXAMPLE_DATA, (err, results) => {\n                if (results.length !== 1) {\n                    throw Error('Something went wrong!');\n                }\n                done();\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "003d481b-73f6-44db-ad90-5e7b82e30bc6",
                "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method save on object with the same property url should return an error",
                "fullTitle": "Models: route.js Tests with required mongoose connection: method save on object with the same property url should return an error",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const route = new routeModel(helpers.ROUTE_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\nroute.save((err, route) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "03e02771-9c38-4147-aeb3-7f90f9693f71",
                "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "route model constructor without required object property url should return an error",
                "fullTitle": "Models: route.js Tests with required mongoose connection: route model constructor without required object property url should return an error",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/* eslint-disable */\nrouteModel.create({}, (err, route) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a2f15406-4566-409b-ab83-b57acd144637",
                "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new route object created only with required object property url should return correct object",
                "fullTitle": "Models: route.js Tests with required mongoose connection: new route object created only with required object property url should return correct object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const routeEqual = {\n    url: route.url,\n    method: route.method,\n    controller: route.controller\n};\nexpect(routeEqual).to.deep.equal(helpers.ROUTE_MODEL.EQUAL_ROUTE);",
                "err": {},
                "isRoot": false,
                "uuid": "0e5f6778-fc98-4a9c-a5bc-42da2b6961f9",
                "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4,
            "rootEmpty": false
          },
          {
            "title": "Tests without required mongoose connection:",
            "suites": [],
            "tests": [
              {
                "title": "is a function",
                "fullTitle": "Models: route.js Tests without required mongoose connection: is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routeModel).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "c5874bdd-d4c5-4d3b-9936-9125d3fadf69",
                "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new route object created with all random object properties should return correct object",
                "fullTitle": "Models: route.js Tests without required mongoose connection: new route object created with all random object properties should return correct object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const routeEqual = {\n    url: route.url,\n    method: route.method,\n    middlewares: route.middlewares,\n    controller: route.controller\n};\nexpect(routeEqual).to.deep.equal(helpers.ROUTE_MODEL.RANDOM_EQUAL_ROUTE);",
                "err": {},
                "isRoot": false,
                "uuid": "c4e877a1-ccd7-4294-b1d7-65694f3c5d14",
                "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method getMiddlewares should return an array with exported modules function",
                "fullTitle": "Models: route.js Tests without required mongoose connection: method getMiddlewares should return an array with exported modules function",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(route.getMiddlewares()).to.be.an('array');\nroute.getMiddlewares().forEach((elem) => {\n    expect(elem).to.be.a('function');\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d9e3362f-65ba-4492-aa51-85aab6c9cda6",
                "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method getController should return exported module function",
                "fullTitle": "Models: route.js Tests without required mongoose connection: method getController should return exported module function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(route.getController()).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "59feae99-db44-4142-8e8a-6a99a6d33f58",
                "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\models\\route.js",
            "uuid": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Models: route.js Tests without required mongoose connection: \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "route = new routeModel(helpers.ROUTE_MODEL.RANDOM_EQUAL_ROUTE);",
                "err": {},
                "isRoot": false,
                "uuid": "22d67b4d-5ce8-482c-b77f-903a497827b6",
                "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\models\\route.js",
            "passes": [
              {
                "title": "is a function",
                "fullTitle": "Models: route.js Tests without required mongoose connection: is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routeModel).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "c5874bdd-d4c5-4d3b-9936-9125d3fadf69",
                "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new route object created with all random object properties should return correct object",
                "fullTitle": "Models: route.js Tests without required mongoose connection: new route object created with all random object properties should return correct object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const routeEqual = {\n    url: route.url,\n    method: route.method,\n    middlewares: route.middlewares,\n    controller: route.controller\n};\nexpect(routeEqual).to.deep.equal(helpers.ROUTE_MODEL.RANDOM_EQUAL_ROUTE);",
                "err": {},
                "isRoot": false,
                "uuid": "c4e877a1-ccd7-4294-b1d7-65694f3c5d14",
                "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method getMiddlewares should return an array with exported modules function",
                "fullTitle": "Models: route.js Tests without required mongoose connection: method getMiddlewares should return an array with exported modules function",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(route.getMiddlewares()).to.be.an('array');\nroute.getMiddlewares().forEach((elem) => {\n    expect(elem).to.be.a('function');\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d9e3362f-65ba-4492-aa51-85aab6c9cda6",
                "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method getController should return exported module function",
                "fullTitle": "Models: route.js Tests without required mongoose connection: method getController should return exported module function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(route.getController()).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "59feae99-db44-4142-8e8a-6a99a6d33f58",
                "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\models\\route.js",
        "uuid": "44eb6730-d6a1-4319-9213-ad6fc64e3b00",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\models\\route.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Models: user.js",
        "suites": [
          {
            "title": "Tests with required mongoose connection:",
            "suites": [],
            "tests": [
              {
                "title": "method user.save() should save new user in a database",
                "fullTitle": "Models: user.js Tests with required mongoose connection: method user.save() should save new user in a database",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\nuser.save((err, user) => {\n    /* eslint-enable */\n    if (err) {\n        throw Error(err);\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f040fc83-4e73-426d-b5d1-2d03d96c0ebb",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.save() with user whose email address already exists in a database should return an error",
                "fullTitle": "Models: user.js Tests with required mongoose connection: method user.save() with user whose email address already exists in a database should return an error",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\nuser.save((err, user) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error(err);\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b621a405-7a94-4bbb-a0fc-f9843286e9af",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.comparePassword() with correct password as an argument should return true as the second argument in callback",
                "fullTitle": "Models: user.js Tests with required mongoose connection: method user.comparePassword() with correct password as an argument should return true as the second argument in callback",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userModel.findOne({\n    email: helpers.USER_MODEL.EXAMPLE_DATA.email\n}, (err, user) => {\n    user.comparePasswords(helpers.USER_MODEL.EXAMPLE_DATA.password, (err, status) => {\n        expect(status).to.be.true;\n        done();\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ccd37524-a570-4959-ada5-356632b16445",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.comparePassword() with wrong password as an argument should return false as the second argument in callback",
                "fullTitle": "Models: user.js Tests with required mongoose connection: method user.comparePassword() with wrong password as an argument should return false as the second argument in callback",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userModel.findOne({\n    email: helpers.USER_MODEL.EXAMPLE_DATA.email\n}, (err, user) => {\n    user.comparePasswords('wrong_password', (err, status) => {\n        expect(status).to.be.false;\n        done();\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d226149c-2e3f-4388-936f-c5505d96f65a",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new user object should contain properties created and updated",
                "fullTitle": "Models: user.js Tests with required mongoose connection: new user object should contain properties created and updated",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userModel.findOne({\n    email: helpers.USER_MODEL.EXAMPLE_DATA.email\n}, (err, user) => {\n    expect(user).to.have.property('created');\n    expect(user).to.have.property('updated');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ad441b44-c8de-419e-ad79-7cec396ba78a",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\models\\user.js",
            "uuid": "341cb913-0f75-4c08-bbac-6d72a3549f79",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Models: user.js Tests with required mongoose connection: \"before all\" hook",
                "timedOut": false,
                "duration": 4,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "mongoose.connect(`mongodb://${helpers.MONGO_DB.USER}:${helpers.MONGO_DB.PASSDOWRD}@${helpers.MONGO_DB.HOST}:${helpers.MONGO_DB.PORT}/${helpers.MONGO_DB.NAME}`, helpers.MONGO_DB.OPTIONS, (err) => {\n    if (err) {\n        /* eslint-disable */\n        console.log(err.message);\n        /* eslint-enable */\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4cad5cc2-91be-4f84-8572-a13f7ec42487",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"before all\" hook",
                "fullTitle": "Models: user.js Tests with required mongoose connection: \"before all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "userModel = mongoose.models.User ? mongoose.model('User') : mongoose.model('User', require('../../models/user').schema);",
                "err": {},
                "isRoot": false,
                "uuid": "ff7f7956-c9a4-4741-ba96-71ce9e6703f9",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Models: user.js Tests with required mongoose connection: \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "userModel.collection.drop().then(() => {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f02cea66-2ea8-4e5d-978b-62bb0daa9e2f",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"after all\" hook",
                "fullTitle": "Models: user.js Tests with required mongoose connection: \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "mongoose.connection.close().then(() => {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1de50079-04b8-4724-b4f4-bbab68c09daf",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\models\\user.js",
            "passes": [
              {
                "title": "method user.save() should save new user in a database",
                "fullTitle": "Models: user.js Tests with required mongoose connection: method user.save() should save new user in a database",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\nuser.save((err, user) => {\n    /* eslint-enable */\n    if (err) {\n        throw Error(err);\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f040fc83-4e73-426d-b5d1-2d03d96c0ebb",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.save() with user whose email address already exists in a database should return an error",
                "fullTitle": "Models: user.js Tests with required mongoose connection: method user.save() with user whose email address already exists in a database should return an error",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\nuser.save((err, user) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error(err);\n    }\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b621a405-7a94-4bbb-a0fc-f9843286e9af",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.comparePassword() with correct password as an argument should return true as the second argument in callback",
                "fullTitle": "Models: user.js Tests with required mongoose connection: method user.comparePassword() with correct password as an argument should return true as the second argument in callback",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userModel.findOne({\n    email: helpers.USER_MODEL.EXAMPLE_DATA.email\n}, (err, user) => {\n    user.comparePasswords(helpers.USER_MODEL.EXAMPLE_DATA.password, (err, status) => {\n        expect(status).to.be.true;\n        done();\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ccd37524-a570-4959-ada5-356632b16445",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.comparePassword() with wrong password as an argument should return false as the second argument in callback",
                "fullTitle": "Models: user.js Tests with required mongoose connection: method user.comparePassword() with wrong password as an argument should return false as the second argument in callback",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userModel.findOne({\n    email: helpers.USER_MODEL.EXAMPLE_DATA.email\n}, (err, user) => {\n    user.comparePasswords('wrong_password', (err, status) => {\n        expect(status).to.be.false;\n        done();\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d226149c-2e3f-4388-936f-c5505d96f65a",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new user object should contain properties created and updated",
                "fullTitle": "Models: user.js Tests with required mongoose connection: new user object should contain properties created and updated",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userModel.findOne({\n    email: helpers.USER_MODEL.EXAMPLE_DATA.email\n}, (err, user) => {\n    expect(user).to.have.property('created');\n    expect(user).to.have.property('updated');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ad441b44-c8de-419e-ad79-7cec396ba78a",
                "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 222,
            "rootEmpty": false
          },
          {
            "title": "Tests without required mongoose connection:",
            "suites": [],
            "tests": [
              {
                "title": "new user object should contain all required properties with correct values",
                "fullTitle": "Models: user.js Tests without required mongoose connection: new user object should contain all required properties with correct values",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA).toObject();\nconst userEqual = helpers.USER_MODEL.EXAMPLE_DATA;\nuserEqual._id = user._id;\nexpect(user).to.deep.equal(helpers.USER_MODEL.EXAMPLE_DATA);",
                "err": {},
                "isRoot": false,
                "uuid": "bd616b7d-72bf-41d9-b5c1-58df53a8d972",
                "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.toJSON() should return correct user object with removed password and active_tokens properties",
                "fullTitle": "Models: user.js Tests without required mongoose connection: method user.toJSON() should return correct user object with removed password and active_tokens properties",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA).toJSON();\nconst userEqual = helpers.USER_MODEL.EXAMPLE_DATA;\nuserEqual._id = user._id;\ndelete userEqual.password;\ndelete userEqual.active_tokens;\nexpect(user).to.deep.equal(userEqual);",
                "err": {},
                "isRoot": false,
                "uuid": "d5c001fa-0607-4023-a01e-5c9154c1240b",
                "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.isActiveToken(token_existing) should return true",
                "fullTitle": "Models: user.js Tests without required mongoose connection: method user.isActiveToken(token_existing) should return true",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\nuser.active_tokens.push('token');\nexpect(user.isActiveToken('token')).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "fa73e643-390e-4579-88ed-e8ca86336fc8",
                "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.isActiveToken(token_not_existing) should return false",
                "fullTitle": "Models: user.js Tests without required mongoose connection: method user.isActiveToken(token_not_existing) should return false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\nexpect(user.isActiveToken('token')).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "3ce11c32-09cd-4a1c-859f-496a0c796892",
                "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.removeToken(token) should remove selected token correctly",
                "fullTitle": "Models: user.js Tests without required mongoose connection: method user.removeToken(token) should remove selected token correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\nuser.active_tokens.push('token');\nexpect(user.active_tokens).to.contains('token');\nuser.removeToken('token');\nexpect(user.active_tokens).to.not.contains('token');",
                "err": {},
                "isRoot": false,
                "uuid": "06f50e8d-dd58-4034-b3d8-a3e617c6537b",
                "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\models\\user.js",
            "uuid": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\models\\user.js",
            "passes": [
              {
                "title": "new user object should contain all required properties with correct values",
                "fullTitle": "Models: user.js Tests without required mongoose connection: new user object should contain all required properties with correct values",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA).toObject();\nconst userEqual = helpers.USER_MODEL.EXAMPLE_DATA;\nuserEqual._id = user._id;\nexpect(user).to.deep.equal(helpers.USER_MODEL.EXAMPLE_DATA);",
                "err": {},
                "isRoot": false,
                "uuid": "bd616b7d-72bf-41d9-b5c1-58df53a8d972",
                "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.toJSON() should return correct user object with removed password and active_tokens properties",
                "fullTitle": "Models: user.js Tests without required mongoose connection: method user.toJSON() should return correct user object with removed password and active_tokens properties",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA).toJSON();\nconst userEqual = helpers.USER_MODEL.EXAMPLE_DATA;\nuserEqual._id = user._id;\ndelete userEqual.password;\ndelete userEqual.active_tokens;\nexpect(user).to.deep.equal(userEqual);",
                "err": {},
                "isRoot": false,
                "uuid": "d5c001fa-0607-4023-a01e-5c9154c1240b",
                "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.isActiveToken(token_existing) should return true",
                "fullTitle": "Models: user.js Tests without required mongoose connection: method user.isActiveToken(token_existing) should return true",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\nuser.active_tokens.push('token');\nexpect(user.isActiveToken('token')).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "fa73e643-390e-4579-88ed-e8ca86336fc8",
                "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.isActiveToken(token_not_existing) should return false",
                "fullTitle": "Models: user.js Tests without required mongoose connection: method user.isActiveToken(token_not_existing) should return false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\nexpect(user.isActiveToken('token')).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "3ce11c32-09cd-4a1c-859f-496a0c796892",
                "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method user.removeToken(token) should remove selected token correctly",
                "fullTitle": "Models: user.js Tests without required mongoose connection: method user.removeToken(token) should remove selected token correctly",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\nuser.active_tokens.push('token');\nexpect(user.active_tokens).to.contains('token');\nuser.removeToken('token');\nexpect(user.active_tokens).to.not.contains('token');",
                "err": {},
                "isRoot": false,
                "uuid": "06f50e8d-dd58-4034-b3d8-a3e617c6537b",
                "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\models\\user.js",
        "uuid": "6803da99-3d33-4441-b299-41da9136f482",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\models\\user.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Pages:",
        "suites": [
          {
            "title": "pages.js",
            "suites": [],
            "tests": [
              {
                "title": "is an instance of an array",
                "fullTitle": "Pages: pages.js is an instance of an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(pages).to.be.an.instanceof(Array);",
                "err": {},
                "isRoot": false,
                "uuid": "c2dfcd17-4232-4588-b48d-124fa0e27975",
                "parentUUID": "80a81f25-0b99-4cd7-bfba-025fae3a5445",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "an array should contain only objects",
                "fullTitle": "Pages: pages.js an array should contain only objects",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "pages.forEach((elem) => {\n                expect(elem).to.be.an('object');\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "ba00b2c6-a646-4af7-ac91-4ef48a3f89f1",
                "parentUUID": "80a81f25-0b99-4cd7-bfba-025fae3a5445",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "each object in an array should have correctly completed properties name, url and fileName",
                "fullTitle": "Pages: pages.js each object in an array should have correctly completed properties name, url and fileName",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "pages.forEach((elem) => {\n                expect(elem).to.have.property('name').and.not.to.be.empty;\n                expect(elem).to.have.property('url').and.to.match(/^\\/{1}[a-z0-9-_]{1,24}$/);\n                expect(elem).to.have.property('fileName').and.not.to.be.empty;\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "bce60e02-16fd-4fb8-90a0-59a6ef32f516",
                "parentUUID": "80a81f25-0b99-4cd7-bfba-025fae3a5445",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\pages\\pages.js",
            "uuid": "80a81f25-0b99-4cd7-bfba-025fae3a5445",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\pages\\pages.js",
            "passes": [
              {
                "title": "is an instance of an array",
                "fullTitle": "Pages: pages.js is an instance of an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(pages).to.be.an.instanceof(Array);",
                "err": {},
                "isRoot": false,
                "uuid": "c2dfcd17-4232-4588-b48d-124fa0e27975",
                "parentUUID": "80a81f25-0b99-4cd7-bfba-025fae3a5445",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "an array should contain only objects",
                "fullTitle": "Pages: pages.js an array should contain only objects",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "pages.forEach((elem) => {\n                expect(elem).to.be.an('object');\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "ba00b2c6-a646-4af7-ac91-4ef48a3f89f1",
                "parentUUID": "80a81f25-0b99-4cd7-bfba-025fae3a5445",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "each object in an array should have correctly completed properties name, url and fileName",
                "fullTitle": "Pages: pages.js each object in an array should have correctly completed properties name, url and fileName",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "pages.forEach((elem) => {\n                expect(elem).to.have.property('name').and.not.to.be.empty;\n                expect(elem).to.have.property('url').and.to.match(/^\\/{1}[a-z0-9-_]{1,24}$/);\n                expect(elem).to.have.property('fileName').and.not.to.be.empty;\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "bce60e02-16fd-4fb8-90a0-59a6ef32f516",
                "parentUUID": "80a81f25-0b99-4cd7-bfba-025fae3a5445",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\pages\\pages.js",
        "uuid": "552a5f2f-0864-4fef-9780-e95900b11994",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\pages\\pages.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Routes:",
        "suites": [
          {
            "title": "routes.js",
            "suites": [],
            "tests": [
              {
                "title": "is an array",
                "fullTitle": "Routes: routes.js is an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routes).to.be.an('array');",
                "err": {},
                "isRoot": false,
                "uuid": "0b5b747a-cf99-4998-b846-8e43d1b60a8e",
                "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "routes <array> should contain only objects",
                "fullTitle": "Routes: routes.js routes <array> should contain only objects",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "routes.forEach((elem) => {\n    expect(elem).to.be.an('object');\n});",
                "err": {},
                "isRoot": false,
                "uuid": "82131d0e-4e39-418c-a55e-7ffd76046feb",
                "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "each object in routes <array> should have property url",
                "fullTitle": "Routes: routes.js each object in routes <array> should have property url",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "routes.forEach((elem) => {\n    expect(elem).to.have.property('url');\n});",
                "err": {},
                "isRoot": false,
                "uuid": "989acc8e-61e9-455b-bdf0-cdd7e2f45863",
                "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "each object property url in routes <array> should be a string or an array of strings e.g. \"/newOne\" || [\"/newOne\"]",
                "fullTitle": "Routes: routes.js each object property url in routes <array> should be a string or an array of strings e.g. \"/newOne\" || [\"/newOne\"]",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const regExp = /(^\\/{1}[a-z0-9-_:{}*\\/]{0,50}$|^\\*$)/;\nroutes.forEach((elem) => {\n    let url = elem.url;\n    expect(typeof url === 'string' || url instanceof Array).to.be.true;\n    if (typeof url === 'string') {\n        expect(url).to.match(regExp);\n    }\n    if (url instanceof Array) {\n        url.forEach((el) => {\n            expect(el).to.match(regExp);\n        });\n    }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "089bc832-0fd0-449c-bda3-2072400a11fe",
                "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\routes\\routes.js",
            "uuid": "e74da255-0763-4ab5-ac68-0f2794fe6576",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\routes\\routes.js",
            "passes": [
              {
                "title": "is an array",
                "fullTitle": "Routes: routes.js is an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(routes).to.be.an('array');",
                "err": {},
                "isRoot": false,
                "uuid": "0b5b747a-cf99-4998-b846-8e43d1b60a8e",
                "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "routes <array> should contain only objects",
                "fullTitle": "Routes: routes.js routes <array> should contain only objects",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "routes.forEach((elem) => {\n    expect(elem).to.be.an('object');\n});",
                "err": {},
                "isRoot": false,
                "uuid": "82131d0e-4e39-418c-a55e-7ffd76046feb",
                "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "each object in routes <array> should have property url",
                "fullTitle": "Routes: routes.js each object in routes <array> should have property url",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "routes.forEach((elem) => {\n    expect(elem).to.have.property('url');\n});",
                "err": {},
                "isRoot": false,
                "uuid": "989acc8e-61e9-455b-bdf0-cdd7e2f45863",
                "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "each object property url in routes <array> should be a string or an array of strings e.g. \"/newOne\" || [\"/newOne\"]",
                "fullTitle": "Routes: routes.js each object property url in routes <array> should be a string or an array of strings e.g. \"/newOne\" || [\"/newOne\"]",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const regExp = /(^\\/{1}[a-z0-9-_:{}*\\/]{0,50}$|^\\*$)/;\nroutes.forEach((elem) => {\n    let url = elem.url;\n    expect(typeof url === 'string' || url instanceof Array).to.be.true;\n    if (typeof url === 'string') {\n        expect(url).to.match(regExp);\n    }\n    if (url instanceof Array) {\n        url.forEach((el) => {\n            expect(el).to.match(regExp);\n        });\n    }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "089bc832-0fd0-449c-bda3-2072400a11fe",
                "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\routes\\routes.js",
        "uuid": "ed0d3ba5-a029-4795-bb57-2cdbd0276ec3",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\routes\\routes.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Services:",
        "suites": [
          {
            "title": "alertHandler.js",
            "suites": [],
            "tests": [
              {
                "title": "is a function",
                "fullTitle": "Services: alertHandler.js is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(alertHandler).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "0f678c60-c3cf-4f51-b3d6-d5ae80b6f5ed",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without any arguments should display a console.log message with info style",
                "fullTitle": "Services: alertHandler.js without any arguments should display a console.log message with info style",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "alertHandler();\nexpect(console.log).to.always.have.been.calledWith(chalk.blue(messageTemplate('Info', 'Remember to specify necessary property type & message in a configuration object or pass arguments in the same order.')));",
                "err": {},
                "isRoot": false,
                "uuid": "11bf6743-4123-4b87-90f8-3b73e1d4f724",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with specified arguments type: normal, message: Normal message! and title: Normal title should display a console.log message with normal style",
                "fullTitle": "Services: alertHandler.js with specified arguments type: normal, message: Normal message! and title: Normal title should display a console.log message with normal style",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const type = 'normal';\nconst message = 'Normal message!';\nconst title = 'Normal title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.white(messageTemplate(title, message)));",
                "err": {},
                "isRoot": false,
                "uuid": "2d3d26d2-3ad7-4748-9088-f2a291c51a36",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with specified arguments type: success, message: Success message! and title: Success title should display a console.log message with success style",
                "fullTitle": "Services: alertHandler.js with specified arguments type: success, message: Success message! and title: Success title should display a console.log message with success style",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const type = 'success';\nconst message = 'Success message!';\nconst title = 'Success title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.green(messageTemplate(title, message)));",
                "err": {},
                "isRoot": false,
                "uuid": "8ca73ec1-2d7d-47e6-b8a3-64b28170964d",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with specified arguments type: info, message: Info message! and title: Info title should display a console.log message with info style",
                "fullTitle": "Services: alertHandler.js with specified arguments type: info, message: Info message! and title: Info title should display a console.log message with info style",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const type = 'info';\nconst message = 'Info message!';\nconst title = 'Info title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.blue(messageTemplate(title, message)));",
                "err": {},
                "isRoot": false,
                "uuid": "b7da04c8-f7a1-4a6c-abcb-f05ee0bc557b",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with specified arguments type: warning, message: Warning message! and title: Warning title should display a console.log message with warning style",
                "fullTitle": "Services: alertHandler.js with specified arguments type: warning, message: Warning message! and title: Warning title should display a console.log message with warning style",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const type = 'warning';\nconst message = 'Warning message!';\nconst title = 'Warning title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.yellow(messageTemplate(title, message)));",
                "err": {},
                "isRoot": false,
                "uuid": "c8948f5c-f51f-4653-8319-454b602e8bac",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with specified arguments type: error, message: Error message! and title: Error title should display a console.log message with error style",
                "fullTitle": "Services: alertHandler.js with specified arguments type: error, message: Error message! and title: Error title should display a console.log message with error style",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const type = 'error';\nconst message = 'Error message!';\nconst title = 'Error title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.red(messageTemplate(title, message)));",
                "err": {},
                "isRoot": false,
                "uuid": "1df79e7d-b7c1-4e5a-beda-ab32eb57c434",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\services\\alert-handler.js",
            "uuid": "d623be88-7c84-4c2f-9747-44be4c8095ab",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Services: alertHandler.js \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sinon.spy(console, 'log');",
                "err": {},
                "isRoot": false,
                "uuid": "4fb47a6e-d5da-4ad9-9a54-e4a75e0158ce",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Services: alertHandler.js \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "console.log.restore();",
                "err": {},
                "isRoot": false,
                "uuid": "8bc58bcf-206c-496c-bc36-21c954adcc16",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\services\\alert-handler.js",
            "passes": [
              {
                "title": "is a function",
                "fullTitle": "Services: alertHandler.js is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(alertHandler).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "0f678c60-c3cf-4f51-b3d6-d5ae80b6f5ed",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "without any arguments should display a console.log message with info style",
                "fullTitle": "Services: alertHandler.js without any arguments should display a console.log message with info style",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "alertHandler();\nexpect(console.log).to.always.have.been.calledWith(chalk.blue(messageTemplate('Info', 'Remember to specify necessary property type & message in a configuration object or pass arguments in the same order.')));",
                "err": {},
                "isRoot": false,
                "uuid": "11bf6743-4123-4b87-90f8-3b73e1d4f724",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with specified arguments type: normal, message: Normal message! and title: Normal title should display a console.log message with normal style",
                "fullTitle": "Services: alertHandler.js with specified arguments type: normal, message: Normal message! and title: Normal title should display a console.log message with normal style",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const type = 'normal';\nconst message = 'Normal message!';\nconst title = 'Normal title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.white(messageTemplate(title, message)));",
                "err": {},
                "isRoot": false,
                "uuid": "2d3d26d2-3ad7-4748-9088-f2a291c51a36",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with specified arguments type: success, message: Success message! and title: Success title should display a console.log message with success style",
                "fullTitle": "Services: alertHandler.js with specified arguments type: success, message: Success message! and title: Success title should display a console.log message with success style",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const type = 'success';\nconst message = 'Success message!';\nconst title = 'Success title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.green(messageTemplate(title, message)));",
                "err": {},
                "isRoot": false,
                "uuid": "8ca73ec1-2d7d-47e6-b8a3-64b28170964d",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with specified arguments type: info, message: Info message! and title: Info title should display a console.log message with info style",
                "fullTitle": "Services: alertHandler.js with specified arguments type: info, message: Info message! and title: Info title should display a console.log message with info style",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const type = 'info';\nconst message = 'Info message!';\nconst title = 'Info title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.blue(messageTemplate(title, message)));",
                "err": {},
                "isRoot": false,
                "uuid": "b7da04c8-f7a1-4a6c-abcb-f05ee0bc557b",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with specified arguments type: warning, message: Warning message! and title: Warning title should display a console.log message with warning style",
                "fullTitle": "Services: alertHandler.js with specified arguments type: warning, message: Warning message! and title: Warning title should display a console.log message with warning style",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const type = 'warning';\nconst message = 'Warning message!';\nconst title = 'Warning title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.yellow(messageTemplate(title, message)));",
                "err": {},
                "isRoot": false,
                "uuid": "c8948f5c-f51f-4653-8319-454b602e8bac",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "with specified arguments type: error, message: Error message! and title: Error title should display a console.log message with error style",
                "fullTitle": "Services: alertHandler.js with specified arguments type: error, message: Error message! and title: Error title should display a console.log message with error style",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const type = 'error';\nconst message = 'Error message!';\nconst title = 'Error title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.red(messageTemplate(title, message)));",
                "err": {},
                "isRoot": false,
                "uuid": "1df79e7d-b7c1-4e5a-beda-ab32eb57c434",
                "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 7,
            "totalPasses": 7,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 6,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\services\\alert-handler.js",
        "uuid": "df18aad2-595c-4b84-ab71-b28079d7d952",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\services\\alert-handler.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Services:",
        "suites": [
          {
            "title": "mailHandler.js",
            "suites": [],
            "tests": [
              {
                "title": "is a function",
                "fullTitle": "Services: mailHandler.js is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(mailHandler).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "2cb3177b-e7e0-4828-ad68-d01fe9e4ecc8",
                "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "mailHandler() without any arguments should return false",
                "fullTitle": "Services: mailHandler.js mailHandler() without any arguments should return false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "mailHandler().then((info) => {\n    /* eslint-disable */\n    console.log(info);\n    /* eslint-enable */\n    done();\n}, (err) => {\n    expect(err).to.be.false;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "48e80255-5a29-4bbb-bf9b-d0ebd0091a41",
                "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "mailHandler(config, user) without property type in config object <config.type> should return false",
                "fullTitle": "Services: mailHandler.js mailHandler(config, user) without property type in config object <config.type> should return false",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "mailHandler({}, {}).then((info) => {\n    /* eslint-disable */\n    console.log(info);\n    /* eslint-enable */\n    done();\n}, (err) => {\n    expect(err).to.be.false;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f10aa96e-b61a-4efc-8f69-7433762c5914",
                "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "mailHandler({type: \"verification-email\"}, {email: \"a@a\"}) should add to object config properties from, to, subject and html with correct values",
                "fullTitle": "Services: mailHandler.js mailHandler({type: \"verification-email\"}, {email: \"a@a\"}) should add to object config properties from, to, subject and html with correct values",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = {\n    email: 'a@a'\n};\nconst config = {\n    type: 'verification_email'\n};\n/* eslint-disable */\nmailHandler(config, user).catch((err) => {\n    //console.log(err);\n});\n/* eslint-enable */\nexpect(config).to.deep.equal({\n    type: 'verification_email',\n    from: '[Restful API] <admin@mateusz-archicinski.pl>',\n    to: 'a@a',\n    subject: 'Email verification',\n    html: '<p>Verify your email address by clicking on <a href=\"undefined/verification/email?token=token\">activate link</a>.</p>'\n});",
                "err": {},
                "isRoot": false,
                "uuid": "dadac28a-31be-4597-be96-da39e359ad7d",
                "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\services\\mail-handler.js",
            "uuid": "f1931ecc-1a73-4811-a809-704c5a417b6c",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Services: mailHandler.js \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sinon.stub(tokenHandler, 'encode').returns('token');",
                "err": {},
                "isRoot": false,
                "uuid": "430dfc7a-c601-44ac-bce5-6ab0fd448e41",
                "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Services: mailHandler.js \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "tokenHandler.encode.restore();",
                "err": {},
                "isRoot": false,
                "uuid": "d178a197-15d4-41f7-9376-f01f0d3d4b5c",
                "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\services\\mail-handler.js",
            "passes": [
              {
                "title": "is a function",
                "fullTitle": "Services: mailHandler.js is a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(mailHandler).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "2cb3177b-e7e0-4828-ad68-d01fe9e4ecc8",
                "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "mailHandler() without any arguments should return false",
                "fullTitle": "Services: mailHandler.js mailHandler() without any arguments should return false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "mailHandler().then((info) => {\n    /* eslint-disable */\n    console.log(info);\n    /* eslint-enable */\n    done();\n}, (err) => {\n    expect(err).to.be.false;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "48e80255-5a29-4bbb-bf9b-d0ebd0091a41",
                "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "mailHandler(config, user) without property type in config object <config.type> should return false",
                "fullTitle": "Services: mailHandler.js mailHandler(config, user) without property type in config object <config.type> should return false",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "mailHandler({}, {}).then((info) => {\n    /* eslint-disable */\n    console.log(info);\n    /* eslint-enable */\n    done();\n}, (err) => {\n    expect(err).to.be.false;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f10aa96e-b61a-4efc-8f69-7433762c5914",
                "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "mailHandler({type: \"verification-email\"}, {email: \"a@a\"}) should add to object config properties from, to, subject and html with correct values",
                "fullTitle": "Services: mailHandler.js mailHandler({type: \"verification-email\"}, {email: \"a@a\"}) should add to object config properties from, to, subject and html with correct values",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const user = {\n    email: 'a@a'\n};\nconst config = {\n    type: 'verification_email'\n};\n/* eslint-disable */\nmailHandler(config, user).catch((err) => {\n    //console.log(err);\n});\n/* eslint-enable */\nexpect(config).to.deep.equal({\n    type: 'verification_email',\n    from: '[Restful API] <admin@mateusz-archicinski.pl>',\n    to: 'a@a',\n    subject: 'Email verification',\n    html: '<p>Verify your email address by clicking on <a href=\"undefined/verification/email?token=token\">activate link</a>.</p>'\n});",
                "err": {},
                "isRoot": false,
                "uuid": "dadac28a-31be-4597-be96-da39e359ad7d",
                "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\services\\mail-handler.js",
        "uuid": "233bc0a6-a4df-47d5-8dee-6549ac29c843",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\services\\mail-handler.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Services:",
        "suites": [
          {
            "title": "mongoose.js",
            "suites": [],
            "tests": [
              {
                "title": "is an object",
                "fullTitle": "Services: mongoose.js is an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(mongoose).to.be.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "053fd0c3-b6b1-425a-88c5-76bead8e8144",
                "parentUUID": "7ff56bf3-d49f-46e2-9835-a406f0ef6057",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\services\\mongoose.js",
            "uuid": "7ff56bf3-d49f-46e2-9835-a406f0ef6057",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\services\\mongoose.js",
            "passes": [
              {
                "title": "is an object",
                "fullTitle": "Services: mongoose.js is an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(mongoose).to.be.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "053fd0c3-b6b1-425a-88c5-76bead8e8144",
                "parentUUID": "7ff56bf3-d49f-46e2-9835-a406f0ef6057",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\services\\mongoose.js",
        "uuid": "05dda5b4-323f-4683-b6bb-6696d3ca1991",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\services\\mongoose.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Services:",
        "suites": [
          {
            "title": "tokenHandler.js",
            "suites": [],
            "tests": [
              {
                "title": "is an object which contains encode and decode methods",
                "fullTitle": "Services: tokenHandler.js is an object which contains encode and decode methods",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(tokenHandler).to.be.an('object');\nexpect(tokenHandler.encode).to.be.a('function');\nexpect(tokenHandler.decode).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "03413537-8eb5-4e21-b22a-15c084cfa91f",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method tokenHandler.encode(subject) should call jwt.encode(payload, secret) once",
                "fullTitle": "Services: tokenHandler.js method tokenHandler.encode(subject) should call jwt.encode(payload, secret) once",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "tokenHandler.encode({});\nexpect(jwt.encode).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "74624c7b-9c82-48c9-b3e0-5149a30714d7",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method tokenHandler.decode(token) should call jwt.decode(token) once",
                "fullTitle": "Services: tokenHandler.js method tokenHandler.decode(token) should call jwt.decode(token) once",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n    tokenHandler.decode('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdWJqZWN0IiwiaWF0IjoxNDk0ODU1OTgxLCJleHAiOjE0OTU0NjA3ODF9.3n7ognYsQRw0n9UirTB8DCpXAzHNYWyutPz92gskVT0');\n} catch (err) {\n    expect(err.message).to.equal('Signature verification failed');\n}",
                "err": {},
                "isRoot": false,
                "uuid": "9b66b6cd-6cc8-45f5-bdfc-17e49b65bb02",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method tokenHandler.decode(token) should return an object with the same payload which was encoded in token",
                "fullTitle": "Services: tokenHandler.js method tokenHandler.decode(token) should return an object with the same payload which was encoded in token",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const encodedToken = tokenHandler.encode(objectMock);\nconst payload = tokenHandler.decode(encodedToken).payload;\nObject.keys(objectMock).forEach((key) => {\n    expect(payload[key]).to.equal(objectMock[key]);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ddf7a006-6e1c-4fa3-b339-c4cf4506537f",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method of decoded token isValid() should return true",
                "fullTitle": "Services: tokenHandler.js method of decoded token isValid() should return true",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const encodedToken = tokenHandler.encode(objectMock);\nconst isValid = tokenHandler.decode(encodedToken).isValid();\nexpect(isValid).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "2e95a982-6479-46f5-8528-c3a7068e1556",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method of decoded token isValid() should return false",
                "fullTitle": "Services: tokenHandler.js method of decoded token isValid() should return false",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sinon.stub(jwt, 'decode').returns({\n    exp: 1\n});\nconst encodedToken = tokenHandler.encode(objectMock);\nconst isValid = tokenHandler.decode(encodedToken).isValid();\nexpect(isValid).to.be.false;\njwt.decode.restore();",
                "err": {},
                "isRoot": false,
                "uuid": "7ab142fc-47ed-41a9-871e-6e6acf21cc98",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 10000,
            "file": "\\test\\services\\token-handler.js",
            "uuid": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Services: tokenHandler.js \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "sinon.spy(jwt, 'encode');",
                "err": {},
                "isRoot": false,
                "uuid": "b55539f4-5a73-4fec-b080-579921f3160b",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Services: tokenHandler.js \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "jwt.encode.restore();",
                "err": {},
                "isRoot": false,
                "uuid": "f937346d-5577-4057-ba0b-6864a07305f7",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\services\\token-handler.js",
            "passes": [
              {
                "title": "is an object which contains encode and decode methods",
                "fullTitle": "Services: tokenHandler.js is an object which contains encode and decode methods",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "expect(tokenHandler).to.be.an('object');\nexpect(tokenHandler.encode).to.be.a('function');\nexpect(tokenHandler.decode).to.be.a('function');",
                "err": {},
                "isRoot": false,
                "uuid": "03413537-8eb5-4e21-b22a-15c084cfa91f",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method tokenHandler.encode(subject) should call jwt.encode(payload, secret) once",
                "fullTitle": "Services: tokenHandler.js method tokenHandler.encode(subject) should call jwt.encode(payload, secret) once",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "tokenHandler.encode({});\nexpect(jwt.encode).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "74624c7b-9c82-48c9-b3e0-5149a30714d7",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method tokenHandler.decode(token) should call jwt.decode(token) once",
                "fullTitle": "Services: tokenHandler.js method tokenHandler.decode(token) should call jwt.decode(token) once",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n    tokenHandler.decode('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdWJqZWN0IiwiaWF0IjoxNDk0ODU1OTgxLCJleHAiOjE0OTU0NjA3ODF9.3n7ognYsQRw0n9UirTB8DCpXAzHNYWyutPz92gskVT0');\n} catch (err) {\n    expect(err.message).to.equal('Signature verification failed');\n}",
                "err": {},
                "isRoot": false,
                "uuid": "9b66b6cd-6cc8-45f5-bdfc-17e49b65bb02",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method tokenHandler.decode(token) should return an object with the same payload which was encoded in token",
                "fullTitle": "Services: tokenHandler.js method tokenHandler.decode(token) should return an object with the same payload which was encoded in token",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const encodedToken = tokenHandler.encode(objectMock);\nconst payload = tokenHandler.decode(encodedToken).payload;\nObject.keys(objectMock).forEach((key) => {\n    expect(payload[key]).to.equal(objectMock[key]);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ddf7a006-6e1c-4fa3-b339-c4cf4506537f",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method of decoded token isValid() should return true",
                "fullTitle": "Services: tokenHandler.js method of decoded token isValid() should return true",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const encodedToken = tokenHandler.encode(objectMock);\nconst isValid = tokenHandler.decode(encodedToken).isValid();\nexpect(isValid).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "2e95a982-6479-46f5-8528-c3a7068e1556",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method of decoded token isValid() should return false",
                "fullTitle": "Services: tokenHandler.js method of decoded token isValid() should return false",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "sinon.stub(jwt, 'decode').returns({\n    exp: 1\n});\nconst encodedToken = tokenHandler.encode(objectMock);\nconst isValid = tokenHandler.decode(encodedToken).isValid();\nexpect(isValid).to.be.false;\njwt.decode.restore();",
                "err": {},
                "isRoot": false,
                "uuid": "7ab142fc-47ed-41a9-871e-6e6acf21cc98",
                "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\test\\services\\token-handler.js",
        "uuid": "cfe1cfcd-a43d-4cb4-9d57-bf69c4df71af",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\xampp\\htdocs\\Projects\\domains\\helpdesk-app.mateusz-archicinski.pl\\dev\\backend\\test\\services\\token-handler.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 10000,
    "uuid": "4da709a0-250f-43d8-8155-21872c64dec2",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should returns status code: 200",
      "fullTitle": "GET: / should returns status code: 200",
      "timedOut": false,
      "duration": 2555,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "setTimeout(() => {\n    /* eslint-disable */\n    request.get(baseUrl, (error, response, body) => {\n        /* eslint-enable */\n        if (error) {\n            throw error;\n        }\n        expect(response.statusCode).to.equal(200);\n        done();\n    });\n}, 2500);",
      "err": {},
      "isRoot": false,
      "uuid": "429889d8-11d4-47ce-9763-7b4fb3cc27a4",
      "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should returns header with a value of property content-type: text/html; charset=utf-8",
      "fullTitle": "GET: / should returns header with a value of property content-type: text/html; charset=utf-8",
      "timedOut": false,
      "duration": 1264,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "setTimeout(() => {\n    /* eslint-disable */\n    request.get(baseUrl, (error, response, body) => {\n        /* eslint-enable */\n        if (error) {\n            throw error;\n        }\n        expect(response.headers['content-type']).to.equal('text/html; charset=utf-8');\n        done();\n    });\n}, 1250);",
      "err": {},
      "isRoot": false,
      "uuid": "31d6047f-720f-4772-8abb-8e72964c1e76",
      "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should returns status code 301",
      "fullTitle": "GET: / should returns status code 301",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "/* eslint-disable */\nrequest.get({\n    url: baseUrl + '///',\n    followRedirect: false\n}, (error, response, body) => {\n    /* eslint-enable */\n    if (error) {\n        throw error;\n    }\n    expect(response.statusCode).to.equal(301);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e125c6d1-c268-47d2-9cd3-d2b994ace6bd",
      "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should returns header with a value of property location: http://localhost:5848",
      "fullTitle": "GET: / should returns header with a value of property location: http://localhost:5848",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "/* eslint-disable */\nrequest.get({\n    url: baseUrl + '///',\n    followRedirect: false\n}, (error, response, body) => {\n    /* eslint-enable */\n    if (error) {\n        throw error;\n    }\n    expect(response.headers.location).to.equal(baseUrl);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5951f386-a65e-4da6-8cbc-d18dff3429dc",
      "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is an object",
      "fullTitle": "app.source.js is an object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(app).to.be.an('object');",
      "err": {},
      "isRoot": false,
      "uuid": "e4101863-f57d-465b-932f-cdcfdcd631de",
      "parentUUID": "136b26af-dff3-429c-9ec6-d8799c269ac9",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl without req.body.email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
      "fullTitle": "login.js ctrl without req.body.email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "loginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: 'Request body do not have specified properties email or password.'\n});",
      "err": {},
      "isRoot": false,
      "uuid": "34c62e81-6a78-4ed7-942b-5116867668ef",
      "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl in case of userModel.find() error should call next(err)",
      "fullTitle": "login.js ctrl in case of userModel.find() error should call next(err)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = userMock;\nuserModel.find.yields(errorsMock.normal);\nloginController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "a78e1a27-3c18-4dee-bfb4-fac77b30fbac",
      "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl in case of userModel.find() return empty array should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "fullTitle": "login.js ctrl in case of userModel.find() return empty array should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = userMock;\nuserModel.find.yields(null, []);\nloginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
      "err": {},
      "isRoot": false,
      "uuid": "0f06b45c-3eea-4cda-bf60-8d1cdb010a4a",
      "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl in case of user.comparePasswords() error should call next(err)",
      "fullTitle": "login.js ctrl in case of user.comparePasswords() error should call next(err)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userMock.errCompare = errorsMock.normal;\nreqMock.body = userMock;\nuserModel.find.yields(null, [userMock]);\nloginController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "6a161832-b5ff-4334-8aaa-be3e5e00ac87",
      "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl in case of user correct comparing passwords should call res with status 200 <number> and json {firstName: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
      "fullTitle": "login.js ctrl in case of user correct comparing passwords should call res with status 200 <number> and json {firstName: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = userMock;\nuserModel.find.yields(null, [userMock]);\nloginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(200);\nexpect(resMock.json).to.have.been.calledWith(userMock);",
      "err": {},
      "isRoot": false,
      "uuid": "94b4dd0b-fe11-4115-9bf8-dd5e07a39f5f",
      "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl in case of user incorrect comparing passwords should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "fullTitle": "login.js ctrl in case of user incorrect comparing passwords should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = {\n    firstName: 'Aa',\n    email: 'a@a',\n    password: 'wrong_password'\n};\nuserModel.find.yields(null, [userMock]);\nloginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
      "err": {},
      "isRoot": false,
      "uuid": "c7aa905b-e97e-460b-b778-0325043fcaeb",
      "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should remove an active/requested token from user.active_tokens",
      "fullTitle": "logout.js should remove an active/requested token from user.active_tokens",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(reqMock.user.active_tokens).to.contains('token');\nlogoutController(reqMock, resMock, nextMock);\nexpect(reqMock.user.active_tokens).to.not.contains('token');",
      "err": {},
      "isRoot": false,
      "uuid": "c0442a15-bc48-4d21-b14a-fe829c360d76",
      "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should call once method user.save()",
      "fullTitle": "logout.js should call once method user.save()",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "logoutController(reqMock, resMock, nextMock);\nexpect(reqMock.user.save).to.have.been.calledOnce;",
      "err": {},
      "isRoot": false,
      "uuid": "1b7026c6-eeee-4077-ac8a-0b99ef15a248",
      "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should call once next(err)",
      "fullTitle": "logout.js should call once next(err)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.user.errSave = errorsMock.normal;\nlogoutController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledOnce.and.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "16a1e55a-a06b-4b1f-9596-a79f0299ae66",
      "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should call res with status 204 <number> and end <empty>",
      "fullTitle": "logout.js should call res with status 204 <number> and end <empty>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "logoutController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(204);\nexpect(resMock.end).to.have.been.calledWith();",
      "err": {},
      "isRoot": false,
      "uuid": "9ba601e2-8d68-41e3-8403-c39e596da37d",
      "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "main.js is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(mainController).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "62f298c3-9266-47f1-b80a-86a4d59d4c6d",
      "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should accept only three arguments",
      "fullTitle": "main.js should accept only three arguments",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(mainController.length).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "7f584ad4-1dc6-4b15-9349-1711188842ac",
      "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should call function res.send() with default message",
      "fullTitle": "main.js should call function res.send() with default message",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mainController(reqMock, resMock, nextMock);\nexpect(resMock.send).to.always.have.been.calledWith('Main Controller: Hello World!');",
      "err": {},
      "isRoot": false,
      "uuid": "863dd942-aec3-4d7f-8307-8bdb91425ffe",
      "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl without req.body.firstName/email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
      "fullTitle": "register.js ctrl without req.body.firstName/email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "registerController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: 'Request body do not have specified properties firstName, email or password.'\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6430cb99-7031-4dfb-b4c2-d913d10c044b",
      "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl with invalid req.body properties should call res with status 400 <number> and json {message: err.message} <object>",
      "fullTitle": "register.js ctrl with invalid req.body properties should call res with status 400 <number> and json {message: err.message} <object>",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = userMock;\nuserModel.prototype.save.yields(errorsMock.validation);\nregisterController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: errorsMock.validation.message\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8602cf02-1989-4b0e-896a-aebebfeb3239",
      "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl in case of user.save() error should call next(err)",
      "fullTitle": "register.js ctrl in case of user.save() error should call next(err)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = userMock;\nuserModel.prototype.save.yields(errorsMock.normal);\nregisterController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "471bb00d-1ee1-4f47-8bc1-66be8128565e",
      "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl with valid req.body properties should call res with status 201 <number> and json {name: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
      "fullTitle": "register.js ctrl with valid req.body properties should call res with status 201 <number> and json {name: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = userMock;\nuserModel.prototype.save.yields(null, userMock);\nregisterController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(201);\nexpect(resMock.json).to.have.been.calledWith(userMock);",
      "err": {},
      "isRoot": false,
      "uuid": "c9c3dd30-3c86-4080-add7-e053b4e05e0e",
      "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "injection of the same data should return an object with property failure <array> which contains duplicate elements in database",
      "fullTitle": "Tests with required mongoose connection: injection of the same data should return an object with property failure <array> which contains duplicate elements in database",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "dataInjector(routeModel, routes).then((results) => {\n    expect(results.failure.length).to.equal(routes.length);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "896201c7-cc87-401a-babb-2f4e97519c10",
      "parentUUID": "41f5ff78-f61a-4c39-b9c2-3363bde2ab41",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "injection of new data should return an object with property success <array> which contain newly added elements to database",
      "fullTitle": "Tests with required mongoose connection: injection of new data should return an object with property success <array> which contain newly added elements to database",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const data = [\n    {\n        url: '/nowa-trasa0'\n    }, {\n        url: '/nowa-trasa1'\n    }\n];\ndataInjector(routeModel, data).then((results) => {\n    expect(results.success.length).to.equal(data.length);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "aa34caea-bf4b-4f7a-bbd3-85767b71c914",
      "parentUUID": "41f5ff78-f61a-4c39-b9c2-3363bde2ab41",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "Tests without required mongoose connection: is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(dataInjector).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "167b6d03-13c8-45a4-8a13-b22d8ad0ffcd",
      "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without any arguments should return false",
      "fullTitle": "Tests without required mongoose connection: without any arguments should return false",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "dataInjector().catch((err) => {\n    expect(err).to.be.false;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cafbaea6-f2fc-4f29-8194-5eba7f231b27",
      "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without required object property or argument model should return false",
      "fullTitle": "Tests without required mongoose connection: without required object property or argument model should return false",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "dataInjector({\n    model: null,\n    array: routes\n}).catch((err) => {\n    expect(err).to.be.false;\n    dataInjector(null, routes).catch((err) => {\n        expect(err).to.be.false;\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0708d494-b10d-45d1-ba5e-045e11c3a528",
      "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without required object property or argument array should return false",
      "fullTitle": "Tests without required mongoose connection: without required object property or argument array should return false",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "dataInjector({\n    model: routeModel,\n    array: null\n}).catch((err) => {\n    expect(err).to.be.false;\n    dataInjector(routeModel, null).catch((err) => {\n        expect(err).to.be.false;\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d842c5e3-a431-4e2e-a262-982f87f99a41",
      "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "routes-injector.js is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "69c2142d-a124-4f0c-bdad-8c3a3fa74201",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without any arguments should return false",
      "fullTitle": "routes-injector.js without any arguments should return false",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector()).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "ddfab7a0-1b62-4868-b628-ed2ef944556e",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "injection of correct data should return an object with property success <array> which contains newly added routes to application",
      "fullTitle": "routes-injector.js injection of correct data should return an object with property success <array> which contains newly added routes to application",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector(app, routes).success.length).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "725a6192-acb2-4371-b9f0-ebeea3d7899b",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "injection of incorrect data should return an object with property incorrect <array> which contains incorrect routes",
      "fullTitle": "routes-injector.js injection of incorrect data should return an object with property incorrect <array> which contains incorrect routes",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector(app, routes).incorrect.length).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "044169f4-e778-415e-a732-39c51d70ad54",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "injection of data causing error should return an object with property failure <array> which contains routes with errors",
      "fullTitle": "routes-injector.js injection of data causing error should return an object with property failure <array> which contains routes with errors",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector(app, routes).failure.length).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "482840ef-8979-42d2-9e95-8876f7142938",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without required object property or argument appObj should return false",
      "fullTitle": "routes-injector.js without required object property or argument appObj should return false",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector({\n    appObj: null,\n    routesArr: routes\n})).to.be.false;\nexpect(routesInjector(null, routes)).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "c838f467-69d1-4cb8-9681-8c887b036f5f",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without required object property or argument routesArr should return false",
      "fullTitle": "routes-injector.js without required object property or argument routesArr should return false",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector({\n    appObj: app,\n    routesArr: null\n})).to.be.false;\nexpect(routesInjector(app, null)).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "290d9f73-9100-439a-94f2-28d69eba6739",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "default.js is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(defMiddleware).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "4b50a0fd-4c67-449b-8d73-67e7b8ee2162",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should accept only three arguments",
      "fullTitle": "default.js should accept only three arguments",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(defMiddleware.length).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "779d3142-de7d-4e20-bd3a-910787bfff0f",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should call function next()",
      "fullTitle": "default.js should call function next()",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(nextMock).to.have.been.calledOnce;",
      "err": {},
      "isRoot": false,
      "uuid": "34d49761-41ee-4ab2-93fa-ef6610426721",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "req.createFullUrl is a function",
      "fullTitle": "default.js req.createFullUrl is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(reqMock.createFullUrl).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "ff11959b-22c8-45b5-ab56-05b624f684f6",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "req.createFullUrl(path) with path as string or number should return correct url value <string>",
      "fullTitle": "default.js req.createFullUrl(path) with path as string or number should return correct url value <string>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const stringMock = 'stringMock';\nconst numberMock = 100;\n// environment: unknown\n// string\nexpect(reqMock.createFullUrl(stringMock)).to.equal(`https://localhost-host/${stringMock}`);\n// number\nexpect(reqMock.createFullUrl(numberMock)).to.equal(`https://localhost-host/${numberMock}`);\n// both equal\nexpect(reqMock.createFullUrl(stringMock)).to.equal(reqMock.createFullUrl(`/${stringMock}`));\nexpect(reqMock.createFullUrl(numberMock)).to.equal(reqMock.createFullUrl(`/${numberMock}`));\n\n// environment: production\nprocess.env.NODE_ENV = 'production';\n// string\nexpect(reqMock.createFullUrl(stringMock)).to.equal(`https://localhost-hostname/${stringMock}`);\n// number\nexpect(reqMock.createFullUrl(numberMock)).to.equal(`https://localhost-hostname/${numberMock}`);\n// both equal\nexpect(reqMock.createFullUrl(stringMock)).to.equal(reqMock.createFullUrl(`/${stringMock}`));\nexpect(reqMock.createFullUrl(numberMock)).to.equal(reqMock.createFullUrl(`/${numberMock}`));\ndelete process.env.NODE_ENV;\n// is a string\nexpect(reqMock.createFullUrl(stringMock)).to.be.a('string');",
      "err": {},
      "isRoot": false,
      "uuid": "ec33d1d1-5878-49c9-96b8-ce2340e89776",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "res.redirectTo() should call res.redirect(status, path) correctly",
      "fullTitle": "default.js res.redirectTo() should call res.redirect(status, path) correctly",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "resMock.redirectTo();\nexpect(resMock.redirect).to.have.been.calledWith(301, 'https://localhost-host');",
      "err": {},
      "isRoot": false,
      "uuid": "80b94898-1611-4b2b-9dfc-c044b6d12d60",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "res.redirectTo(path) should call res.redirect(status, path) correctly",
      "fullTitle": "default.js res.redirectTo(path) should call res.redirect(status, path) correctly",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "resMock.redirectTo('en/dashboard');\nexpect(resMock.redirect).to.have.been.calledWith(301, 'https://localhost-host/en/dashboard');",
      "err": {},
      "isRoot": false,
      "uuid": "d9375b14-0dd2-4705-8de6-18ad446a0534",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "res.redirectTo(path, status) should call res.redirect(status, path) correctly",
      "fullTitle": "default.js res.redirectTo(path, status) should call res.redirect(status, path) correctly",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "resMock.redirectTo('/en/dashboard', 302);\nexpect(resMock.redirect).to.have.been.calledWith(302, 'https://localhost-host/en/dashboard');",
      "err": {},
      "isRoot": false,
      "uuid": "73f7d7b5-d072-43dd-93e4-93e4cbfedae2",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without request authorization header should call res with status 401 <number> and json {message: \"Please make...\"} <object>",
      "fullTitle": "ensureAuthentication.js without request authorization header should call res with status 401 <number> and json {message: \"Please make...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "delete reqMock.headers.authorization;\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith({\n    message: 'Please make sure your request has an Authorization header.'\n});",
      "err": {},
      "isRoot": false,
      "uuid": "af60d308-5ea0-45af-9604-06ebc869dbce",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with authorization token which throws an exception should call res with status 401 <number> and json {message: err.message} <object>",
      "fullTitle": "ensureAuthentication.js with authorization token which throws an exception should call res with status 401 <number> and json {message: err.message} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tokenHandler.decode.throws(errorsMock.normal);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "5ec5c072-0202-4278-8f73-38a72a1b979a",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with a not compatible device which sent request to token.payload.device should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "fullTitle": "ensureAuthentication.js with a not compatible device which sent request to token.payload.device should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "delete tokenHandlerMock.payload.device;\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
      "err": {},
      "isRoot": false,
      "uuid": "7342780a-587d-425a-88a4-0a1f122c9b3b",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "in case of error userModel.find() method should call next(err)",
      "fullTitle": "ensureAuthentication.js in case of error userModel.find() method should call next(err)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userModel.find.yields(errorsMock.normal);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "26701c5f-22e4-4621-b6f2-51b62a7c83d1",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "in case of no user is found should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "fullTitle": "ensureAuthentication.js in case of no user is found should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userModel.find.yields(null, []);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
      "err": {},
      "isRoot": false,
      "uuid": "a597a557-4c1b-4422-afad-9459e009378d",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with valid and active token should add property user to req",
      "fullTitle": "ensureAuthentication.js with valid and active token should add property user to req",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\ntokenHandlerMock.v = true;\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(reqMock.user).to.deep.equal(userMock);",
      "err": {},
      "isRoot": false,
      "uuid": "bcbf2382-d0d3-4172-817f-3ed3480c2b10",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "in case of expired or inactive token should call res with status 401 <number> and json {message: \"Your token...\"} <object>",
      "fullTitle": "ensureAuthentication.js in case of expired or inactive token should call res with status 401 <number> and json {message: \"Your token...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.expires);",
      "err": {},
      "isRoot": false,
      "uuid": "15a44f73-eb7a-41e9-974c-08b8deabebc0",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should remove expired token which is still assigned to user.active_tokens property and call res with status 401 <number> and json {message: \"Your token...\"} <object>",
      "fullTitle": "ensureAuthentication.js should remove expired token which is still assigned to user.active_tokens property and call res with status 401 <number> and json {message: \"Your token...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(userMock.active_tokens).to.be.empty;\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.expires);",
      "err": {},
      "isRoot": false,
      "uuid": "145be2a6-47bb-4cf0-a33e-32a118b401d2",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "in case of error user.save() method should call next(err)",
      "fullTitle": "ensureAuthentication.js in case of error user.save() method should call next(err)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\nuserMock.errSave = errorsMock.normal;\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "660656e6-893c-40fc-8b14-aa568e526619",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "in case of ValidationError user.save() method should call res with status 400 <number> and json {message: err.message} <object>",
      "fullTitle": "ensureAuthentication.js in case of ValidationError user.save() method should call res with status 400 <number> and json {message: err.message} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\nuserMock.errSave = errorsMock.validation;\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: errorsMock.validation.message\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4c89c5b0-e925-480e-a50e-15d0effe1ede",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "language.js is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(language).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "6775b12a-44ff-4cf8-802e-05d4c9e5a47d",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should accept only three arguments",
      "fullTitle": "language.js should accept only three arguments",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(language.length).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "ce464338-b794-4185-b8dd-c8e0bd572951",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should call function next()",
      "fullTitle": "language.js should call function next()",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(nextMock).to.have.been.calledOnce;",
      "err": {},
      "isRoot": false,
      "uuid": "558139dc-f05b-4aca-8fb8-9b2f09ff0ab2",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with wrong language param req.lang.value should return default value: pl",
      "fullTitle": "language.js with wrong language param req.lang.value should return default value: pl",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(reqMock.lang.value).to.equal(PAGES_CONFIG.LANGUAGES[0]);",
      "err": {},
      "isRoot": false,
      "uuid": "d846900d-f29c-43ab-bd71-811a2bfc7e8d",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with \"pl\" language param req.lang.value should return \"pl\"",
      "fullTitle": "language.js with \"pl\" language param req.lang.value should return \"pl\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const reqMockPL = nodeMocksHttp.createRequest({\n    params: {\n        lang: 'pl'\n    }\n});\nlanguage(reqMockPL, resMock, nextMock);\nexpect(reqMockPL.lang.value).to.equal('pl');",
      "err": {},
      "isRoot": false,
      "uuid": "4e5311ca-b9c9-4958-bdec-7d58ceea8e6f",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with \"en\" language param req.lang.value should return \"en\"",
      "fullTitle": "language.js with \"en\" language param req.lang.value should return \"en\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const reqMockEN = nodeMocksHttp.createRequest({\n    params: {\n        lang: 'en'\n    }\n});\nlanguage(reqMockEN, resMock, nextMock);\nexpect(reqMockEN.lang.value).to.equal('en');",
      "err": {},
      "isRoot": false,
      "uuid": "ca33c107-0196-4620-8053-f207955eef55",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with any language param req.lang.exist should return true",
      "fullTitle": "language.js with any language param req.lang.exist should return true",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const reqMockANY = nodeMocksHttp.createRequest({\n    params: {\n        lang: 'plpl'\n    }\n});\nlanguage(reqMockANY, resMock, nextMock);\nexpect(reqMockANY.lang.exist).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "d0be97e1-0eb9-41e9-9d78-102bf0c99d31",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without language param req.lang.exist should return false",
      "fullTitle": "language.js without language param req.lang.exist should return false",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(reqMock.lang.exist).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "445bc823-865e-4786-9313-86209af3996a",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is an instance of an array",
      "fullTitle": "middlewares.js is an instance of an array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(middlewares).to.be.an.instanceof(Array);",
      "err": {},
      "isRoot": false,
      "uuid": "3cc830ff-7ce0-4407-8bc8-4d7b10e55ad7",
      "parentUUID": "78d03cc8-af64-426d-8ed1-d72e27ccad95",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "an array should contain only functions",
      "fullTitle": "middlewares.js an array should contain only functions",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "middlewares.forEach((elem) => {\n                expect(elem).to.be.a('function');\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "df46e1ac-56c7-4245-ab87-926e804bea80",
      "parentUUID": "78d03cc8-af64-426d-8ed1-d72e27ccad95",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method find should return an array with one object",
      "fullTitle": "Tests with required mongoose connection: method find should return an array with one object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "pageModel.find(helpers.PAGE_MODEL.EXAMPLE_DATA, (err, results) => {\n    if (results.length !== 1) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5dd0bc76-05b1-4623-98b6-eaf88fe1e817",
      "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method save on object with the same property name should return an error",
      "fullTitle": "Tests with required mongoose connection: method save on object with the same property name should return an error",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const page = new pageModel({\n    name: 'test',\n    url: '/test1',\n    fileName: 'test1'\n});\n/* eslint-disable */\npage.save((err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "10e28ae3-97fc-4bfd-8597-244a70d7c110",
      "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method save on object with the same property url should return an error",
      "fullTitle": "Tests with required mongoose connection: method save on object with the same property url should return an error",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const page = new pageModel({\n    name: 'test1',\n    url: '/test',\n    fileName: 'test1'\n});\n/* eslint-disable */\npage.save((err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1c14813b-9181-4baa-b90e-40a82bce8d58",
      "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "page model constructor without required object properties name, url or fileName should return an error",
      "fullTitle": "Tests with required mongoose connection: page model constructor without required object properties name, url or fileName should return an error",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "pageModel.create({\n    url: '/test',\n    fileName: 'test'\n    /* eslint-disable */\n}, (err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n});\npageModel.create({\n    name: 'test',\n    fileName: 'test'\n    /* eslint-disable */\n}, (err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n});\npageModel.create({\n    name: 'test',\n    url: '/test'\n    /* eslint-disable */\n}, (err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "493cb8d8-42ee-4311-8462-3f4da00fcd95",
      "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "new page object created only with required object properties name, url and fileName should return correct object",
      "fullTitle": "Tests with required mongoose connection: new page object created only with required object properties name, url and fileName should return correct object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const pageEqual = {\n    name: page.name,\n    url: page.url,\n    statusCode: page.statusCode,\n    fileName: page.fileName,\n    type: page.type,\n    redirect: {\n        statusCode: page.redirect.statusCode,\n        type: page.redirect.type,\n        name: page.redirect.name,\n        url: page.redirect.url\n    },\n    root: page.root\n};\nexpect(pageEqual).to.deep.equal(helpers.PAGE_MODEL.EQUAL_PAGE);",
      "err": {},
      "isRoot": false,
      "uuid": "7638f958-1730-4c2a-97e3-da6b13823073",
      "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "Tests without required mongoose connection: is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(pageModel).to.be.a('function');\ndone();",
      "err": {},
      "isRoot": false,
      "uuid": "ca633e70-83f9-4b97-9db8-1cd119433202",
      "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "new page object created with all random object properties should return correct object",
      "fullTitle": "Tests without required mongoose connection: new page object created with all random object properties should return correct object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const pageEqual = {\n    name: page.name,\n    url: page.url,\n    statusCode: page.statusCode,\n    fileName: page.fileName,\n    type: page.type,\n    redirect: {\n        statusCode: page.redirect.statusCode,\n        type: page.redirect.type,\n        name: page.redirect.name,\n        url: page.redirect.url\n    },\n    root: page.root\n};\nexpect(pageEqual).to.deep.equal(helpers.PAGE_MODEL.RANDOM_EQUAL_PAGE);",
      "err": {},
      "isRoot": false,
      "uuid": "10b5a514-f8ab-452f-ab2b-f8865565fbcb",
      "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method fullUrl should return full url with language param: /pl/test",
      "fullTitle": "Tests without required mongoose connection: method fullUrl should return full url with language param: /pl/test",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(page.fullUrl('pl')).to.equal('/pl/404');",
      "err": {},
      "isRoot": false,
      "uuid": "01e7ac91-344b-4a2d-8179-e3cc3ae95ea1",
      "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method fullFileName should return full file name with language suffix (-pl) and extension (.html): test-pl.html",
      "fullTitle": "Tests without required mongoose connection: method fullFileName should return full file name with language suffix (-pl) and extension (.html): test-pl.html",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(page.fullFileName('pl')).to.equal('404-pl.html');",
      "err": {},
      "isRoot": false,
      "uuid": "c47c2261-98da-4737-948f-5718affa0216",
      "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method find should return an array with one object",
      "fullTitle": "Tests with required mongoose connection: method find should return an array with one object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "routeModel.find(helpers.ROUTE_MODEL.EXAMPLE_DATA, (err, results) => {\n                if (results.length !== 1) {\n                    throw Error('Something went wrong!');\n                }\n                done();\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "003d481b-73f6-44db-ad90-5e7b82e30bc6",
      "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method save on object with the same property url should return an error",
      "fullTitle": "Tests with required mongoose connection: method save on object with the same property url should return an error",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const route = new routeModel(helpers.ROUTE_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\nroute.save((err, route) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "03e02771-9c38-4147-aeb3-7f90f9693f71",
      "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "route model constructor without required object property url should return an error",
      "fullTitle": "Tests with required mongoose connection: route model constructor without required object property url should return an error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "/* eslint-disable */\nrouteModel.create({}, (err, route) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a2f15406-4566-409b-ab83-b57acd144637",
      "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "new route object created only with required object property url should return correct object",
      "fullTitle": "Tests with required mongoose connection: new route object created only with required object property url should return correct object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const routeEqual = {\n    url: route.url,\n    method: route.method,\n    controller: route.controller\n};\nexpect(routeEqual).to.deep.equal(helpers.ROUTE_MODEL.EQUAL_ROUTE);",
      "err": {},
      "isRoot": false,
      "uuid": "0e5f6778-fc98-4a9c-a5bc-42da2b6961f9",
      "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "Tests without required mongoose connection: is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routeModel).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "c5874bdd-d4c5-4d3b-9936-9125d3fadf69",
      "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "new route object created with all random object properties should return correct object",
      "fullTitle": "Tests without required mongoose connection: new route object created with all random object properties should return correct object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const routeEqual = {\n    url: route.url,\n    method: route.method,\n    middlewares: route.middlewares,\n    controller: route.controller\n};\nexpect(routeEqual).to.deep.equal(helpers.ROUTE_MODEL.RANDOM_EQUAL_ROUTE);",
      "err": {},
      "isRoot": false,
      "uuid": "c4e877a1-ccd7-4294-b1d7-65694f3c5d14",
      "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method getMiddlewares should return an array with exported modules function",
      "fullTitle": "Tests without required mongoose connection: method getMiddlewares should return an array with exported modules function",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(route.getMiddlewares()).to.be.an('array');\nroute.getMiddlewares().forEach((elem) => {\n    expect(elem).to.be.a('function');\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d9e3362f-65ba-4492-aa51-85aab6c9cda6",
      "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method getController should return exported module function",
      "fullTitle": "Tests without required mongoose connection: method getController should return exported module function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(route.getController()).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "59feae99-db44-4142-8e8a-6a99a6d33f58",
      "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.save() should save new user in a database",
      "fullTitle": "Tests with required mongoose connection: method user.save() should save new user in a database",
      "timedOut": false,
      "duration": 87,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\nuser.save((err, user) => {\n    /* eslint-enable */\n    if (err) {\n        throw Error(err);\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f040fc83-4e73-426d-b5d1-2d03d96c0ebb",
      "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.save() with user whose email address already exists in a database should return an error",
      "fullTitle": "Tests with required mongoose connection: method user.save() with user whose email address already exists in a database should return an error",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\nuser.save((err, user) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error(err);\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b621a405-7a94-4bbb-a0fc-f9843286e9af",
      "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.comparePassword() with correct password as an argument should return true as the second argument in callback",
      "fullTitle": "Tests with required mongoose connection: method user.comparePassword() with correct password as an argument should return true as the second argument in callback",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userModel.findOne({\n    email: helpers.USER_MODEL.EXAMPLE_DATA.email\n}, (err, user) => {\n    user.comparePasswords(helpers.USER_MODEL.EXAMPLE_DATA.password, (err, status) => {\n        expect(status).to.be.true;\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ccd37524-a570-4959-ada5-356632b16445",
      "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.comparePassword() with wrong password as an argument should return false as the second argument in callback",
      "fullTitle": "Tests with required mongoose connection: method user.comparePassword() with wrong password as an argument should return false as the second argument in callback",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userModel.findOne({\n    email: helpers.USER_MODEL.EXAMPLE_DATA.email\n}, (err, user) => {\n    user.comparePasswords('wrong_password', (err, status) => {\n        expect(status).to.be.false;\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d226149c-2e3f-4388-936f-c5505d96f65a",
      "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "new user object should contain properties created and updated",
      "fullTitle": "Tests with required mongoose connection: new user object should contain properties created and updated",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userModel.findOne({\n    email: helpers.USER_MODEL.EXAMPLE_DATA.email\n}, (err, user) => {\n    expect(user).to.have.property('created');\n    expect(user).to.have.property('updated');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ad441b44-c8de-419e-ad79-7cec396ba78a",
      "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "new user object should contain all required properties with correct values",
      "fullTitle": "Tests without required mongoose connection: new user object should contain all required properties with correct values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA).toObject();\nconst userEqual = helpers.USER_MODEL.EXAMPLE_DATA;\nuserEqual._id = user._id;\nexpect(user).to.deep.equal(helpers.USER_MODEL.EXAMPLE_DATA);",
      "err": {},
      "isRoot": false,
      "uuid": "bd616b7d-72bf-41d9-b5c1-58df53a8d972",
      "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.toJSON() should return correct user object with removed password and active_tokens properties",
      "fullTitle": "Tests without required mongoose connection: method user.toJSON() should return correct user object with removed password and active_tokens properties",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA).toJSON();\nconst userEqual = helpers.USER_MODEL.EXAMPLE_DATA;\nuserEqual._id = user._id;\ndelete userEqual.password;\ndelete userEqual.active_tokens;\nexpect(user).to.deep.equal(userEqual);",
      "err": {},
      "isRoot": false,
      "uuid": "d5c001fa-0607-4023-a01e-5c9154c1240b",
      "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.isActiveToken(token_existing) should return true",
      "fullTitle": "Tests without required mongoose connection: method user.isActiveToken(token_existing) should return true",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\nuser.active_tokens.push('token');\nexpect(user.isActiveToken('token')).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "fa73e643-390e-4579-88ed-e8ca86336fc8",
      "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.isActiveToken(token_not_existing) should return false",
      "fullTitle": "Tests without required mongoose connection: method user.isActiveToken(token_not_existing) should return false",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\nexpect(user.isActiveToken('token')).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "3ce11c32-09cd-4a1c-859f-496a0c796892",
      "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.removeToken(token) should remove selected token correctly",
      "fullTitle": "Tests without required mongoose connection: method user.removeToken(token) should remove selected token correctly",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\nuser.active_tokens.push('token');\nexpect(user.active_tokens).to.contains('token');\nuser.removeToken('token');\nexpect(user.active_tokens).to.not.contains('token');",
      "err": {},
      "isRoot": false,
      "uuid": "06f50e8d-dd58-4034-b3d8-a3e617c6537b",
      "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is an instance of an array",
      "fullTitle": "pages.js is an instance of an array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(pages).to.be.an.instanceof(Array);",
      "err": {},
      "isRoot": false,
      "uuid": "c2dfcd17-4232-4588-b48d-124fa0e27975",
      "parentUUID": "80a81f25-0b99-4cd7-bfba-025fae3a5445",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "an array should contain only objects",
      "fullTitle": "pages.js an array should contain only objects",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "pages.forEach((elem) => {\n                expect(elem).to.be.an('object');\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "ba00b2c6-a646-4af7-ac91-4ef48a3f89f1",
      "parentUUID": "80a81f25-0b99-4cd7-bfba-025fae3a5445",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "each object in an array should have correctly completed properties name, url and fileName",
      "fullTitle": "pages.js each object in an array should have correctly completed properties name, url and fileName",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "pages.forEach((elem) => {\n                expect(elem).to.have.property('name').and.not.to.be.empty;\n                expect(elem).to.have.property('url').and.to.match(/^\\/{1}[a-z0-9-_]{1,24}$/);\n                expect(elem).to.have.property('fileName').and.not.to.be.empty;\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "bce60e02-16fd-4fb8-90a0-59a6ef32f516",
      "parentUUID": "80a81f25-0b99-4cd7-bfba-025fae3a5445",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is an array",
      "fullTitle": "routes.js is an array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routes).to.be.an('array');",
      "err": {},
      "isRoot": false,
      "uuid": "0b5b747a-cf99-4998-b846-8e43d1b60a8e",
      "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "routes <array> should contain only objects",
      "fullTitle": "routes.js routes <array> should contain only objects",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "routes.forEach((elem) => {\n    expect(elem).to.be.an('object');\n});",
      "err": {},
      "isRoot": false,
      "uuid": "82131d0e-4e39-418c-a55e-7ffd76046feb",
      "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "each object in routes <array> should have property url",
      "fullTitle": "routes.js each object in routes <array> should have property url",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "routes.forEach((elem) => {\n    expect(elem).to.have.property('url');\n});",
      "err": {},
      "isRoot": false,
      "uuid": "989acc8e-61e9-455b-bdf0-cdd7e2f45863",
      "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "each object property url in routes <array> should be a string or an array of strings e.g. \"/newOne\" || [\"/newOne\"]",
      "fullTitle": "routes.js each object property url in routes <array> should be a string or an array of strings e.g. \"/newOne\" || [\"/newOne\"]",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const regExp = /(^\\/{1}[a-z0-9-_:{}*\\/]{0,50}$|^\\*$)/;\nroutes.forEach((elem) => {\n    let url = elem.url;\n    expect(typeof url === 'string' || url instanceof Array).to.be.true;\n    if (typeof url === 'string') {\n        expect(url).to.match(regExp);\n    }\n    if (url instanceof Array) {\n        url.forEach((el) => {\n            expect(el).to.match(regExp);\n        });\n    }\n});",
      "err": {},
      "isRoot": false,
      "uuid": "089bc832-0fd0-449c-bda3-2072400a11fe",
      "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "alertHandler.js is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(alertHandler).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "0f678c60-c3cf-4f51-b3d6-d5ae80b6f5ed",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without any arguments should display a console.log message with info style",
      "fullTitle": "alertHandler.js without any arguments should display a console.log message with info style",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "alertHandler();\nexpect(console.log).to.always.have.been.calledWith(chalk.blue(messageTemplate('Info', 'Remember to specify necessary property type & message in a configuration object or pass arguments in the same order.')));",
      "err": {},
      "isRoot": false,
      "uuid": "11bf6743-4123-4b87-90f8-3b73e1d4f724",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with specified arguments type: normal, message: Normal message! and title: Normal title should display a console.log message with normal style",
      "fullTitle": "alertHandler.js with specified arguments type: normal, message: Normal message! and title: Normal title should display a console.log message with normal style",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const type = 'normal';\nconst message = 'Normal message!';\nconst title = 'Normal title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.white(messageTemplate(title, message)));",
      "err": {},
      "isRoot": false,
      "uuid": "2d3d26d2-3ad7-4748-9088-f2a291c51a36",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with specified arguments type: success, message: Success message! and title: Success title should display a console.log message with success style",
      "fullTitle": "alertHandler.js with specified arguments type: success, message: Success message! and title: Success title should display a console.log message with success style",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const type = 'success';\nconst message = 'Success message!';\nconst title = 'Success title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.green(messageTemplate(title, message)));",
      "err": {},
      "isRoot": false,
      "uuid": "8ca73ec1-2d7d-47e6-b8a3-64b28170964d",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with specified arguments type: info, message: Info message! and title: Info title should display a console.log message with info style",
      "fullTitle": "alertHandler.js with specified arguments type: info, message: Info message! and title: Info title should display a console.log message with info style",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const type = 'info';\nconst message = 'Info message!';\nconst title = 'Info title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.blue(messageTemplate(title, message)));",
      "err": {},
      "isRoot": false,
      "uuid": "b7da04c8-f7a1-4a6c-abcb-f05ee0bc557b",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with specified arguments type: warning, message: Warning message! and title: Warning title should display a console.log message with warning style",
      "fullTitle": "alertHandler.js with specified arguments type: warning, message: Warning message! and title: Warning title should display a console.log message with warning style",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const type = 'warning';\nconst message = 'Warning message!';\nconst title = 'Warning title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.yellow(messageTemplate(title, message)));",
      "err": {},
      "isRoot": false,
      "uuid": "c8948f5c-f51f-4653-8319-454b602e8bac",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with specified arguments type: error, message: Error message! and title: Error title should display a console.log message with error style",
      "fullTitle": "alertHandler.js with specified arguments type: error, message: Error message! and title: Error title should display a console.log message with error style",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const type = 'error';\nconst message = 'Error message!';\nconst title = 'Error title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.red(messageTemplate(title, message)));",
      "err": {},
      "isRoot": false,
      "uuid": "1df79e7d-b7c1-4e5a-beda-ab32eb57c434",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "mailHandler.js is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(mailHandler).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "2cb3177b-e7e0-4828-ad68-d01fe9e4ecc8",
      "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "mailHandler() without any arguments should return false",
      "fullTitle": "mailHandler.js mailHandler() without any arguments should return false",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mailHandler().then((info) => {\n    /* eslint-disable */\n    console.log(info);\n    /* eslint-enable */\n    done();\n}, (err) => {\n    expect(err).to.be.false;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "48e80255-5a29-4bbb-bf9b-d0ebd0091a41",
      "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "mailHandler(config, user) without property type in config object <config.type> should return false",
      "fullTitle": "mailHandler.js mailHandler(config, user) without property type in config object <config.type> should return false",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mailHandler({}, {}).then((info) => {\n    /* eslint-disable */\n    console.log(info);\n    /* eslint-enable */\n    done();\n}, (err) => {\n    expect(err).to.be.false;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f10aa96e-b61a-4efc-8f69-7433762c5914",
      "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "mailHandler({type: \"verification-email\"}, {email: \"a@a\"}) should add to object config properties from, to, subject and html with correct values",
      "fullTitle": "mailHandler.js mailHandler({type: \"verification-email\"}, {email: \"a@a\"}) should add to object config properties from, to, subject and html with correct values",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = {\n    email: 'a@a'\n};\nconst config = {\n    type: 'verification_email'\n};\n/* eslint-disable */\nmailHandler(config, user).catch((err) => {\n    //console.log(err);\n});\n/* eslint-enable */\nexpect(config).to.deep.equal({\n    type: 'verification_email',\n    from: '[Restful API] <admin@mateusz-archicinski.pl>',\n    to: 'a@a',\n    subject: 'Email verification',\n    html: '<p>Verify your email address by clicking on <a href=\"undefined/verification/email?token=token\">activate link</a>.</p>'\n});",
      "err": {},
      "isRoot": false,
      "uuid": "dadac28a-31be-4597-be96-da39e359ad7d",
      "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is an object",
      "fullTitle": "mongoose.js is an object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(mongoose).to.be.an('object');",
      "err": {},
      "isRoot": false,
      "uuid": "053fd0c3-b6b1-425a-88c5-76bead8e8144",
      "parentUUID": "7ff56bf3-d49f-46e2-9835-a406f0ef6057",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is an object which contains encode and decode methods",
      "fullTitle": "tokenHandler.js is an object which contains encode and decode methods",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(tokenHandler).to.be.an('object');\nexpect(tokenHandler.encode).to.be.a('function');\nexpect(tokenHandler.decode).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "03413537-8eb5-4e21-b22a-15c084cfa91f",
      "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method tokenHandler.encode(subject) should call jwt.encode(payload, secret) once",
      "fullTitle": "tokenHandler.js method tokenHandler.encode(subject) should call jwt.encode(payload, secret) once",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tokenHandler.encode({});\nexpect(jwt.encode).to.have.been.calledOnce;",
      "err": {},
      "isRoot": false,
      "uuid": "74624c7b-9c82-48c9-b3e0-5149a30714d7",
      "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method tokenHandler.decode(token) should call jwt.decode(token) once",
      "fullTitle": "tokenHandler.js method tokenHandler.decode(token) should call jwt.decode(token) once",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n    tokenHandler.decode('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdWJqZWN0IiwiaWF0IjoxNDk0ODU1OTgxLCJleHAiOjE0OTU0NjA3ODF9.3n7ognYsQRw0n9UirTB8DCpXAzHNYWyutPz92gskVT0');\n} catch (err) {\n    expect(err.message).to.equal('Signature verification failed');\n}",
      "err": {},
      "isRoot": false,
      "uuid": "9b66b6cd-6cc8-45f5-bdfc-17e49b65bb02",
      "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method tokenHandler.decode(token) should return an object with the same payload which was encoded in token",
      "fullTitle": "tokenHandler.js method tokenHandler.decode(token) should return an object with the same payload which was encoded in token",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const encodedToken = tokenHandler.encode(objectMock);\nconst payload = tokenHandler.decode(encodedToken).payload;\nObject.keys(objectMock).forEach((key) => {\n    expect(payload[key]).to.equal(objectMock[key]);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ddf7a006-6e1c-4fa3-b339-c4cf4506537f",
      "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method of decoded token isValid() should return true",
      "fullTitle": "tokenHandler.js method of decoded token isValid() should return true",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const encodedToken = tokenHandler.encode(objectMock);\nconst isValid = tokenHandler.decode(encodedToken).isValid();\nexpect(isValid).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "2e95a982-6479-46f5-8528-c3a7068e1556",
      "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method of decoded token isValid() should return false",
      "fullTitle": "tokenHandler.js method of decoded token isValid() should return false",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "sinon.stub(jwt, 'decode').returns({\n    exp: 1\n});\nconst encodedToken = tokenHandler.encode(objectMock);\nconst isValid = tokenHandler.decode(encodedToken).isValid();\nexpect(isValid).to.be.false;\njwt.decode.restore();",
      "err": {},
      "isRoot": false,
      "uuid": "7ab142fc-47ed-41a9-871e-6e6acf21cc98",
      "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should returns status code: 200",
      "fullTitle": "GET: / should returns status code: 200",
      "timedOut": false,
      "duration": 2555,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "setTimeout(() => {\n    /* eslint-disable */\n    request.get(baseUrl, (error, response, body) => {\n        /* eslint-enable */\n        if (error) {\n            throw error;\n        }\n        expect(response.statusCode).to.equal(200);\n        done();\n    });\n}, 2500);",
      "err": {},
      "isRoot": false,
      "uuid": "429889d8-11d4-47ce-9763-7b4fb3cc27a4",
      "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should returns header with a value of property content-type: text/html; charset=utf-8",
      "fullTitle": "GET: / should returns header with a value of property content-type: text/html; charset=utf-8",
      "timedOut": false,
      "duration": 1264,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "setTimeout(() => {\n    /* eslint-disable */\n    request.get(baseUrl, (error, response, body) => {\n        /* eslint-enable */\n        if (error) {\n            throw error;\n        }\n        expect(response.headers['content-type']).to.equal('text/html; charset=utf-8');\n        done();\n    });\n}, 1250);",
      "err": {},
      "isRoot": false,
      "uuid": "31d6047f-720f-4772-8abb-8e72964c1e76",
      "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should returns status code 301",
      "fullTitle": "GET: / should returns status code 301",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "/* eslint-disable */\nrequest.get({\n    url: baseUrl + '///',\n    followRedirect: false\n}, (error, response, body) => {\n    /* eslint-enable */\n    if (error) {\n        throw error;\n    }\n    expect(response.statusCode).to.equal(301);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e125c6d1-c268-47d2-9cd3-d2b994ace6bd",
      "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should returns header with a value of property location: http://localhost:5848",
      "fullTitle": "GET: / should returns header with a value of property location: http://localhost:5848",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "/* eslint-disable */\nrequest.get({\n    url: baseUrl + '///',\n    followRedirect: false\n}, (error, response, body) => {\n    /* eslint-enable */\n    if (error) {\n        throw error;\n    }\n    expect(response.headers.location).to.equal(baseUrl);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5951f386-a65e-4da6-8cbc-d18dff3429dc",
      "parentUUID": "28b13141-f93d-4954-b38d-d48a730d8bca",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is an object",
      "fullTitle": "app.source.js is an object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(app).to.be.an('object');",
      "err": {},
      "isRoot": false,
      "uuid": "e4101863-f57d-465b-932f-cdcfdcd631de",
      "parentUUID": "136b26af-dff3-429c-9ec6-d8799c269ac9",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl without req.body.email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
      "fullTitle": "login.js ctrl without req.body.email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "loginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: 'Request body do not have specified properties email or password.'\n});",
      "err": {},
      "isRoot": false,
      "uuid": "34c62e81-6a78-4ed7-942b-5116867668ef",
      "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl in case of userModel.find() error should call next(err)",
      "fullTitle": "login.js ctrl in case of userModel.find() error should call next(err)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = userMock;\nuserModel.find.yields(errorsMock.normal);\nloginController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "a78e1a27-3c18-4dee-bfb4-fac77b30fbac",
      "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl in case of userModel.find() return empty array should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "fullTitle": "login.js ctrl in case of userModel.find() return empty array should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = userMock;\nuserModel.find.yields(null, []);\nloginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
      "err": {},
      "isRoot": false,
      "uuid": "0f06b45c-3eea-4cda-bf60-8d1cdb010a4a",
      "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl in case of user.comparePasswords() error should call next(err)",
      "fullTitle": "login.js ctrl in case of user.comparePasswords() error should call next(err)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userMock.errCompare = errorsMock.normal;\nreqMock.body = userMock;\nuserModel.find.yields(null, [userMock]);\nloginController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "6a161832-b5ff-4334-8aaa-be3e5e00ac87",
      "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl in case of user correct comparing passwords should call res with status 200 <number> and json {firstName: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
      "fullTitle": "login.js ctrl in case of user correct comparing passwords should call res with status 200 <number> and json {firstName: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = userMock;\nuserModel.find.yields(null, [userMock]);\nloginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(200);\nexpect(resMock.json).to.have.been.calledWith(userMock);",
      "err": {},
      "isRoot": false,
      "uuid": "94b4dd0b-fe11-4115-9bf8-dd5e07a39f5f",
      "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl in case of user incorrect comparing passwords should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "fullTitle": "login.js ctrl in case of user incorrect comparing passwords should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = {\n    firstName: 'Aa',\n    email: 'a@a',\n    password: 'wrong_password'\n};\nuserModel.find.yields(null, [userMock]);\nloginController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
      "err": {},
      "isRoot": false,
      "uuid": "c7aa905b-e97e-460b-b778-0325043fcaeb",
      "parentUUID": "bf420f1f-756e-4434-87bf-38abdd31f430",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should remove an active/requested token from user.active_tokens",
      "fullTitle": "logout.js should remove an active/requested token from user.active_tokens",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(reqMock.user.active_tokens).to.contains('token');\nlogoutController(reqMock, resMock, nextMock);\nexpect(reqMock.user.active_tokens).to.not.contains('token');",
      "err": {},
      "isRoot": false,
      "uuid": "c0442a15-bc48-4d21-b14a-fe829c360d76",
      "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should call once method user.save()",
      "fullTitle": "logout.js should call once method user.save()",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "logoutController(reqMock, resMock, nextMock);\nexpect(reqMock.user.save).to.have.been.calledOnce;",
      "err": {},
      "isRoot": false,
      "uuid": "1b7026c6-eeee-4077-ac8a-0b99ef15a248",
      "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should call once next(err)",
      "fullTitle": "logout.js should call once next(err)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.user.errSave = errorsMock.normal;\nlogoutController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledOnce.and.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "16a1e55a-a06b-4b1f-9596-a79f0299ae66",
      "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should call res with status 204 <number> and end <empty>",
      "fullTitle": "logout.js should call res with status 204 <number> and end <empty>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "logoutController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(204);\nexpect(resMock.end).to.have.been.calledWith();",
      "err": {},
      "isRoot": false,
      "uuid": "9ba601e2-8d68-41e3-8403-c39e596da37d",
      "parentUUID": "5f904b03-becf-464d-9bdd-20f6fe1ac326",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "main.js is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(mainController).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "62f298c3-9266-47f1-b80a-86a4d59d4c6d",
      "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should accept only three arguments",
      "fullTitle": "main.js should accept only three arguments",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(mainController.length).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "7f584ad4-1dc6-4b15-9349-1711188842ac",
      "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should call function res.send() with default message",
      "fullTitle": "main.js should call function res.send() with default message",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mainController(reqMock, resMock, nextMock);\nexpect(resMock.send).to.always.have.been.calledWith('Main Controller: Hello World!');",
      "err": {},
      "isRoot": false,
      "uuid": "863dd942-aec3-4d7f-8307-8bdb91425ffe",
      "parentUUID": "e7ad21f8-e7b2-434e-a506-5ea937e4bb76",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl without req.body.firstName/email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
      "fullTitle": "register.js ctrl without req.body.firstName/email/password should call res with status 400 <number> and json {message: \"Request body...\"} <object>",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "registerController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: 'Request body do not have specified properties firstName, email or password.'\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6430cb99-7031-4dfb-b4c2-d913d10c044b",
      "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl with invalid req.body properties should call res with status 400 <number> and json {message: err.message} <object>",
      "fullTitle": "register.js ctrl with invalid req.body properties should call res with status 400 <number> and json {message: err.message} <object>",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = userMock;\nuserModel.prototype.save.yields(errorsMock.validation);\nregisterController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: errorsMock.validation.message\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8602cf02-1989-4b0e-896a-aebebfeb3239",
      "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl in case of user.save() error should call next(err)",
      "fullTitle": "register.js ctrl in case of user.save() error should call next(err)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = userMock;\nuserModel.prototype.save.yields(errorsMock.normal);\nregisterController(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "471bb00d-1ee1-4f47-8bc1-66be8128565e",
      "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ctrl with valid req.body properties should call res with status 201 <number> and json {name: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
      "fullTitle": "register.js ctrl with valid req.body properties should call res with status 201 <number> and json {name: \"Aa\", email: \"a@a\", password: \"aaaaaaaa\"} <object>",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "reqMock.body = userMock;\nuserModel.prototype.save.yields(null, userMock);\nregisterController(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(201);\nexpect(resMock.json).to.have.been.calledWith(userMock);",
      "err": {},
      "isRoot": false,
      "uuid": "c9c3dd30-3c86-4080-add7-e053b4e05e0e",
      "parentUUID": "e7ae2c1d-3cdd-4f5a-9800-8f713635a5b3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "injection of the same data should return an object with property failure <array> which contains duplicate elements in database",
      "fullTitle": "Tests with required mongoose connection: injection of the same data should return an object with property failure <array> which contains duplicate elements in database",
      "timedOut": false,
      "duration": 19,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "dataInjector(routeModel, routes).then((results) => {\n    expect(results.failure.length).to.equal(routes.length);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "896201c7-cc87-401a-babb-2f4e97519c10",
      "parentUUID": "41f5ff78-f61a-4c39-b9c2-3363bde2ab41",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "injection of new data should return an object with property success <array> which contain newly added elements to database",
      "fullTitle": "Tests with required mongoose connection: injection of new data should return an object with property success <array> which contain newly added elements to database",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const data = [\n    {\n        url: '/nowa-trasa0'\n    }, {\n        url: '/nowa-trasa1'\n    }\n];\ndataInjector(routeModel, data).then((results) => {\n    expect(results.success.length).to.equal(data.length);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "aa34caea-bf4b-4f7a-bbd3-85767b71c914",
      "parentUUID": "41f5ff78-f61a-4c39-b9c2-3363bde2ab41",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "Tests without required mongoose connection: is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(dataInjector).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "167b6d03-13c8-45a4-8a13-b22d8ad0ffcd",
      "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without any arguments should return false",
      "fullTitle": "Tests without required mongoose connection: without any arguments should return false",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "dataInjector().catch((err) => {\n    expect(err).to.be.false;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cafbaea6-f2fc-4f29-8194-5eba7f231b27",
      "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without required object property or argument model should return false",
      "fullTitle": "Tests without required mongoose connection: without required object property or argument model should return false",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "dataInjector({\n    model: null,\n    array: routes\n}).catch((err) => {\n    expect(err).to.be.false;\n    dataInjector(null, routes).catch((err) => {\n        expect(err).to.be.false;\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0708d494-b10d-45d1-ba5e-045e11c3a528",
      "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without required object property or argument array should return false",
      "fullTitle": "Tests without required mongoose connection: without required object property or argument array should return false",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "dataInjector({\n    model: routeModel,\n    array: null\n}).catch((err) => {\n    expect(err).to.be.false;\n    dataInjector(routeModel, null).catch((err) => {\n        expect(err).to.be.false;\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d842c5e3-a431-4e2e-a262-982f87f99a41",
      "parentUUID": "b3ef3983-379b-48c8-a408-d678dba12ae2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "routes-injector.js is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "69c2142d-a124-4f0c-bdad-8c3a3fa74201",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without any arguments should return false",
      "fullTitle": "routes-injector.js without any arguments should return false",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector()).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "ddfab7a0-1b62-4868-b628-ed2ef944556e",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "injection of correct data should return an object with property success <array> which contains newly added routes to application",
      "fullTitle": "routes-injector.js injection of correct data should return an object with property success <array> which contains newly added routes to application",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector(app, routes).success.length).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "725a6192-acb2-4371-b9f0-ebeea3d7899b",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "injection of incorrect data should return an object with property incorrect <array> which contains incorrect routes",
      "fullTitle": "routes-injector.js injection of incorrect data should return an object with property incorrect <array> which contains incorrect routes",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector(app, routes).incorrect.length).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "044169f4-e778-415e-a732-39c51d70ad54",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "injection of data causing error should return an object with property failure <array> which contains routes with errors",
      "fullTitle": "routes-injector.js injection of data causing error should return an object with property failure <array> which contains routes with errors",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector(app, routes).failure.length).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "482840ef-8979-42d2-9e95-8876f7142938",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without required object property or argument appObj should return false",
      "fullTitle": "routes-injector.js without required object property or argument appObj should return false",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector({\n    appObj: null,\n    routesArr: routes\n})).to.be.false;\nexpect(routesInjector(null, routes)).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "c838f467-69d1-4cb8-9681-8c887b036f5f",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without required object property or argument routesArr should return false",
      "fullTitle": "routes-injector.js without required object property or argument routesArr should return false",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routesInjector({\n    appObj: app,\n    routesArr: null\n})).to.be.false;\nexpect(routesInjector(app, null)).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "290d9f73-9100-439a-94f2-28d69eba6739",
      "parentUUID": "97de6576-e976-43e5-b18d-3547d2d76ec0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "default.js is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(defMiddleware).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "4b50a0fd-4c67-449b-8d73-67e7b8ee2162",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should accept only three arguments",
      "fullTitle": "default.js should accept only three arguments",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(defMiddleware.length).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "779d3142-de7d-4e20-bd3a-910787bfff0f",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should call function next()",
      "fullTitle": "default.js should call function next()",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(nextMock).to.have.been.calledOnce;",
      "err": {},
      "isRoot": false,
      "uuid": "34d49761-41ee-4ab2-93fa-ef6610426721",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "req.createFullUrl is a function",
      "fullTitle": "default.js req.createFullUrl is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(reqMock.createFullUrl).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "ff11959b-22c8-45b5-ab56-05b624f684f6",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "req.createFullUrl(path) with path as string or number should return correct url value <string>",
      "fullTitle": "default.js req.createFullUrl(path) with path as string or number should return correct url value <string>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const stringMock = 'stringMock';\nconst numberMock = 100;\n// environment: unknown\n// string\nexpect(reqMock.createFullUrl(stringMock)).to.equal(`https://localhost-host/${stringMock}`);\n// number\nexpect(reqMock.createFullUrl(numberMock)).to.equal(`https://localhost-host/${numberMock}`);\n// both equal\nexpect(reqMock.createFullUrl(stringMock)).to.equal(reqMock.createFullUrl(`/${stringMock}`));\nexpect(reqMock.createFullUrl(numberMock)).to.equal(reqMock.createFullUrl(`/${numberMock}`));\n\n// environment: production\nprocess.env.NODE_ENV = 'production';\n// string\nexpect(reqMock.createFullUrl(stringMock)).to.equal(`https://localhost-hostname/${stringMock}`);\n// number\nexpect(reqMock.createFullUrl(numberMock)).to.equal(`https://localhost-hostname/${numberMock}`);\n// both equal\nexpect(reqMock.createFullUrl(stringMock)).to.equal(reqMock.createFullUrl(`/${stringMock}`));\nexpect(reqMock.createFullUrl(numberMock)).to.equal(reqMock.createFullUrl(`/${numberMock}`));\ndelete process.env.NODE_ENV;\n// is a string\nexpect(reqMock.createFullUrl(stringMock)).to.be.a('string');",
      "err": {},
      "isRoot": false,
      "uuid": "ec33d1d1-5878-49c9-96b8-ce2340e89776",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "res.redirectTo() should call res.redirect(status, path) correctly",
      "fullTitle": "default.js res.redirectTo() should call res.redirect(status, path) correctly",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "resMock.redirectTo();\nexpect(resMock.redirect).to.have.been.calledWith(301, 'https://localhost-host');",
      "err": {},
      "isRoot": false,
      "uuid": "80b94898-1611-4b2b-9dfc-c044b6d12d60",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "res.redirectTo(path) should call res.redirect(status, path) correctly",
      "fullTitle": "default.js res.redirectTo(path) should call res.redirect(status, path) correctly",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "resMock.redirectTo('en/dashboard');\nexpect(resMock.redirect).to.have.been.calledWith(301, 'https://localhost-host/en/dashboard');",
      "err": {},
      "isRoot": false,
      "uuid": "d9375b14-0dd2-4705-8de6-18ad446a0534",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "res.redirectTo(path, status) should call res.redirect(status, path) correctly",
      "fullTitle": "default.js res.redirectTo(path, status) should call res.redirect(status, path) correctly",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "resMock.redirectTo('/en/dashboard', 302);\nexpect(resMock.redirect).to.have.been.calledWith(302, 'https://localhost-host/en/dashboard');",
      "err": {},
      "isRoot": false,
      "uuid": "73f7d7b5-d072-43dd-93e4-93e4cbfedae2",
      "parentUUID": "18c2f3e5-24f9-4284-b3e4-6b135365d64b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without request authorization header should call res with status 401 <number> and json {message: \"Please make...\"} <object>",
      "fullTitle": "ensureAuthentication.js without request authorization header should call res with status 401 <number> and json {message: \"Please make...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "delete reqMock.headers.authorization;\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith({\n    message: 'Please make sure your request has an Authorization header.'\n});",
      "err": {},
      "isRoot": false,
      "uuid": "af60d308-5ea0-45af-9604-06ebc869dbce",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with authorization token which throws an exception should call res with status 401 <number> and json {message: err.message} <object>",
      "fullTitle": "ensureAuthentication.js with authorization token which throws an exception should call res with status 401 <number> and json {message: err.message} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tokenHandler.decode.throws(errorsMock.normal);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "5ec5c072-0202-4278-8f73-38a72a1b979a",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with a not compatible device which sent request to token.payload.device should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "fullTitle": "ensureAuthentication.js with a not compatible device which sent request to token.payload.device should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "delete tokenHandlerMock.payload.device;\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
      "err": {},
      "isRoot": false,
      "uuid": "7342780a-587d-425a-88a4-0a1f122c9b3b",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "in case of error userModel.find() method should call next(err)",
      "fullTitle": "ensureAuthentication.js in case of error userModel.find() method should call next(err)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userModel.find.yields(errorsMock.normal);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "26701c5f-22e4-4621-b6f2-51b62a7c83d1",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "in case of no user is found should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "fullTitle": "ensureAuthentication.js in case of no user is found should call res with status 401 <number> and json {message: \"You are...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userModel.find.yields(null, []);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.unauthorized);",
      "err": {},
      "isRoot": false,
      "uuid": "a597a557-4c1b-4422-afad-9459e009378d",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with valid and active token should add property user to req",
      "fullTitle": "ensureAuthentication.js with valid and active token should add property user to req",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\ntokenHandlerMock.v = true;\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(reqMock.user).to.deep.equal(userMock);",
      "err": {},
      "isRoot": false,
      "uuid": "bcbf2382-d0d3-4172-817f-3ed3480c2b10",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "in case of expired or inactive token should call res with status 401 <number> and json {message: \"Your token...\"} <object>",
      "fullTitle": "ensureAuthentication.js in case of expired or inactive token should call res with status 401 <number> and json {message: \"Your token...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.expires);",
      "err": {},
      "isRoot": false,
      "uuid": "15a44f73-eb7a-41e9-974c-08b8deabebc0",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should remove expired token which is still assigned to user.active_tokens property and call res with status 401 <number> and json {message: \"Your token...\"} <object>",
      "fullTitle": "ensureAuthentication.js should remove expired token which is still assigned to user.active_tokens property and call res with status 401 <number> and json {message: \"Your token...\"} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(userMock.active_tokens).to.be.empty;\nexpect(resMock.status).to.have.been.calledWith(401);\nexpect(resMock.json).to.have.been.calledWith(errorsMock.expires);",
      "err": {},
      "isRoot": false,
      "uuid": "145be2a6-47bb-4cf0-a33e-32a118b401d2",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "in case of error user.save() method should call next(err)",
      "fullTitle": "ensureAuthentication.js in case of error user.save() method should call next(err)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\nuserMock.errSave = errorsMock.normal;\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(nextMock).to.have.been.calledWith(errorsMock.normal);",
      "err": {},
      "isRoot": false,
      "uuid": "660656e6-893c-40fc-8b14-aa568e526619",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "in case of ValidationError user.save() method should call res with status 400 <number> and json {message: err.message} <object>",
      "fullTitle": "ensureAuthentication.js in case of ValidationError user.save() method should call res with status 400 <number> and json {message: err.message} <object>",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userMock.active_tokens.push(tokenHandlerMock.encoded);\nuserMock.errSave = errorsMock.validation;\nuserModel.find.yields(null, [userMock]);\nensureAuthentication(reqMock, resMock, nextMock);\nexpect(resMock.status).to.have.been.calledWith(400);\nexpect(resMock.json).to.have.been.calledWith({\n    message: errorsMock.validation.message\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4c89c5b0-e925-480e-a50e-15d0effe1ede",
      "parentUUID": "42e04699-5748-4941-8843-41651af0f53a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "language.js is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(language).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "6775b12a-44ff-4cf8-802e-05d4c9e5a47d",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should accept only three arguments",
      "fullTitle": "language.js should accept only three arguments",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(language.length).to.equal(3);",
      "err": {},
      "isRoot": false,
      "uuid": "ce464338-b794-4185-b8dd-c8e0bd572951",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should call function next()",
      "fullTitle": "language.js should call function next()",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(nextMock).to.have.been.calledOnce;",
      "err": {},
      "isRoot": false,
      "uuid": "558139dc-f05b-4aca-8fb8-9b2f09ff0ab2",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with wrong language param req.lang.value should return default value: pl",
      "fullTitle": "language.js with wrong language param req.lang.value should return default value: pl",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(reqMock.lang.value).to.equal(PAGES_CONFIG.LANGUAGES[0]);",
      "err": {},
      "isRoot": false,
      "uuid": "d846900d-f29c-43ab-bd71-811a2bfc7e8d",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with \"pl\" language param req.lang.value should return \"pl\"",
      "fullTitle": "language.js with \"pl\" language param req.lang.value should return \"pl\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const reqMockPL = nodeMocksHttp.createRequest({\n    params: {\n        lang: 'pl'\n    }\n});\nlanguage(reqMockPL, resMock, nextMock);\nexpect(reqMockPL.lang.value).to.equal('pl');",
      "err": {},
      "isRoot": false,
      "uuid": "4e5311ca-b9c9-4958-bdec-7d58ceea8e6f",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with \"en\" language param req.lang.value should return \"en\"",
      "fullTitle": "language.js with \"en\" language param req.lang.value should return \"en\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const reqMockEN = nodeMocksHttp.createRequest({\n    params: {\n        lang: 'en'\n    }\n});\nlanguage(reqMockEN, resMock, nextMock);\nexpect(reqMockEN.lang.value).to.equal('en');",
      "err": {},
      "isRoot": false,
      "uuid": "ca33c107-0196-4620-8053-f207955eef55",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with any language param req.lang.exist should return true",
      "fullTitle": "language.js with any language param req.lang.exist should return true",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const reqMockANY = nodeMocksHttp.createRequest({\n    params: {\n        lang: 'plpl'\n    }\n});\nlanguage(reqMockANY, resMock, nextMock);\nexpect(reqMockANY.lang.exist).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "d0be97e1-0eb9-41e9-9d78-102bf0c99d31",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without language param req.lang.exist should return false",
      "fullTitle": "language.js without language param req.lang.exist should return false",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(reqMock.lang.exist).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "445bc823-865e-4786-9313-86209af3996a",
      "parentUUID": "7dc761b3-248b-4518-a670-2a931b65df57",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is an instance of an array",
      "fullTitle": "middlewares.js is an instance of an array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(middlewares).to.be.an.instanceof(Array);",
      "err": {},
      "isRoot": false,
      "uuid": "3cc830ff-7ce0-4407-8bc8-4d7b10e55ad7",
      "parentUUID": "78d03cc8-af64-426d-8ed1-d72e27ccad95",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "an array should contain only functions",
      "fullTitle": "middlewares.js an array should contain only functions",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "middlewares.forEach((elem) => {\n                expect(elem).to.be.a('function');\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "df46e1ac-56c7-4245-ab87-926e804bea80",
      "parentUUID": "78d03cc8-af64-426d-8ed1-d72e27ccad95",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method find should return an array with one object",
      "fullTitle": "Tests with required mongoose connection: method find should return an array with one object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "pageModel.find(helpers.PAGE_MODEL.EXAMPLE_DATA, (err, results) => {\n    if (results.length !== 1) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5dd0bc76-05b1-4623-98b6-eaf88fe1e817",
      "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method save on object with the same property name should return an error",
      "fullTitle": "Tests with required mongoose connection: method save on object with the same property name should return an error",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const page = new pageModel({\n    name: 'test',\n    url: '/test1',\n    fileName: 'test1'\n});\n/* eslint-disable */\npage.save((err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "10e28ae3-97fc-4bfd-8597-244a70d7c110",
      "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method save on object with the same property url should return an error",
      "fullTitle": "Tests with required mongoose connection: method save on object with the same property url should return an error",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const page = new pageModel({\n    name: 'test1',\n    url: '/test',\n    fileName: 'test1'\n});\n/* eslint-disable */\npage.save((err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1c14813b-9181-4baa-b90e-40a82bce8d58",
      "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "page model constructor without required object properties name, url or fileName should return an error",
      "fullTitle": "Tests with required mongoose connection: page model constructor without required object properties name, url or fileName should return an error",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "pageModel.create({\n    url: '/test',\n    fileName: 'test'\n    /* eslint-disable */\n}, (err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n});\npageModel.create({\n    name: 'test',\n    fileName: 'test'\n    /* eslint-disable */\n}, (err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n});\npageModel.create({\n    name: 'test',\n    url: '/test'\n    /* eslint-disable */\n}, (err, page) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "493cb8d8-42ee-4311-8462-3f4da00fcd95",
      "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "new page object created only with required object properties name, url and fileName should return correct object",
      "fullTitle": "Tests with required mongoose connection: new page object created only with required object properties name, url and fileName should return correct object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const pageEqual = {\n    name: page.name,\n    url: page.url,\n    statusCode: page.statusCode,\n    fileName: page.fileName,\n    type: page.type,\n    redirect: {\n        statusCode: page.redirect.statusCode,\n        type: page.redirect.type,\n        name: page.redirect.name,\n        url: page.redirect.url\n    },\n    root: page.root\n};\nexpect(pageEqual).to.deep.equal(helpers.PAGE_MODEL.EQUAL_PAGE);",
      "err": {},
      "isRoot": false,
      "uuid": "7638f958-1730-4c2a-97e3-da6b13823073",
      "parentUUID": "39499545-7a87-40d2-83ee-1d841808a6d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "Tests without required mongoose connection: is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(pageModel).to.be.a('function');\ndone();",
      "err": {},
      "isRoot": false,
      "uuid": "ca633e70-83f9-4b97-9db8-1cd119433202",
      "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "new page object created with all random object properties should return correct object",
      "fullTitle": "Tests without required mongoose connection: new page object created with all random object properties should return correct object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const pageEqual = {\n    name: page.name,\n    url: page.url,\n    statusCode: page.statusCode,\n    fileName: page.fileName,\n    type: page.type,\n    redirect: {\n        statusCode: page.redirect.statusCode,\n        type: page.redirect.type,\n        name: page.redirect.name,\n        url: page.redirect.url\n    },\n    root: page.root\n};\nexpect(pageEqual).to.deep.equal(helpers.PAGE_MODEL.RANDOM_EQUAL_PAGE);",
      "err": {},
      "isRoot": false,
      "uuid": "10b5a514-f8ab-452f-ab2b-f8865565fbcb",
      "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method fullUrl should return full url with language param: /pl/test",
      "fullTitle": "Tests without required mongoose connection: method fullUrl should return full url with language param: /pl/test",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(page.fullUrl('pl')).to.equal('/pl/404');",
      "err": {},
      "isRoot": false,
      "uuid": "01e7ac91-344b-4a2d-8179-e3cc3ae95ea1",
      "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method fullFileName should return full file name with language suffix (-pl) and extension (.html): test-pl.html",
      "fullTitle": "Tests without required mongoose connection: method fullFileName should return full file name with language suffix (-pl) and extension (.html): test-pl.html",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(page.fullFileName('pl')).to.equal('404-pl.html');",
      "err": {},
      "isRoot": false,
      "uuid": "c47c2261-98da-4737-948f-5718affa0216",
      "parentUUID": "6b1c1a7a-567c-4749-b256-839e0016251f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method find should return an array with one object",
      "fullTitle": "Tests with required mongoose connection: method find should return an array with one object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "routeModel.find(helpers.ROUTE_MODEL.EXAMPLE_DATA, (err, results) => {\n                if (results.length !== 1) {\n                    throw Error('Something went wrong!');\n                }\n                done();\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "003d481b-73f6-44db-ad90-5e7b82e30bc6",
      "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method save on object with the same property url should return an error",
      "fullTitle": "Tests with required mongoose connection: method save on object with the same property url should return an error",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const route = new routeModel(helpers.ROUTE_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\nroute.save((err, route) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "03e02771-9c38-4147-aeb3-7f90f9693f71",
      "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "route model constructor without required object property url should return an error",
      "fullTitle": "Tests with required mongoose connection: route model constructor without required object property url should return an error",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "/* eslint-disable */\nrouteModel.create({}, (err, route) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error('Something went wrong!');\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a2f15406-4566-409b-ab83-b57acd144637",
      "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "new route object created only with required object property url should return correct object",
      "fullTitle": "Tests with required mongoose connection: new route object created only with required object property url should return correct object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const routeEqual = {\n    url: route.url,\n    method: route.method,\n    controller: route.controller\n};\nexpect(routeEqual).to.deep.equal(helpers.ROUTE_MODEL.EQUAL_ROUTE);",
      "err": {},
      "isRoot": false,
      "uuid": "0e5f6778-fc98-4a9c-a5bc-42da2b6961f9",
      "parentUUID": "01d6d39c-fb74-4838-aff0-864db4019111",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "Tests without required mongoose connection: is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routeModel).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "c5874bdd-d4c5-4d3b-9936-9125d3fadf69",
      "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "new route object created with all random object properties should return correct object",
      "fullTitle": "Tests without required mongoose connection: new route object created with all random object properties should return correct object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const routeEqual = {\n    url: route.url,\n    method: route.method,\n    middlewares: route.middlewares,\n    controller: route.controller\n};\nexpect(routeEqual).to.deep.equal(helpers.ROUTE_MODEL.RANDOM_EQUAL_ROUTE);",
      "err": {},
      "isRoot": false,
      "uuid": "c4e877a1-ccd7-4294-b1d7-65694f3c5d14",
      "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method getMiddlewares should return an array with exported modules function",
      "fullTitle": "Tests without required mongoose connection: method getMiddlewares should return an array with exported modules function",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(route.getMiddlewares()).to.be.an('array');\nroute.getMiddlewares().forEach((elem) => {\n    expect(elem).to.be.a('function');\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d9e3362f-65ba-4492-aa51-85aab6c9cda6",
      "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method getController should return exported module function",
      "fullTitle": "Tests without required mongoose connection: method getController should return exported module function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(route.getController()).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "59feae99-db44-4142-8e8a-6a99a6d33f58",
      "parentUUID": "a6dc43ec-6bac-4cff-a1a6-6155186b6836",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.save() should save new user in a database",
      "fullTitle": "Tests with required mongoose connection: method user.save() should save new user in a database",
      "timedOut": false,
      "duration": 87,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\nuser.save((err, user) => {\n    /* eslint-enable */\n    if (err) {\n        throw Error(err);\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f040fc83-4e73-426d-b5d1-2d03d96c0ebb",
      "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.save() with user whose email address already exists in a database should return an error",
      "fullTitle": "Tests with required mongoose connection: method user.save() with user whose email address already exists in a database should return an error",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\n/* eslint-disable */\nuser.save((err, user) => {\n    /* eslint-enable */\n    if (!err) {\n        throw Error(err);\n    }\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b621a405-7a94-4bbb-a0fc-f9843286e9af",
      "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.comparePassword() with correct password as an argument should return true as the second argument in callback",
      "fullTitle": "Tests with required mongoose connection: method user.comparePassword() with correct password as an argument should return true as the second argument in callback",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userModel.findOne({\n    email: helpers.USER_MODEL.EXAMPLE_DATA.email\n}, (err, user) => {\n    user.comparePasswords(helpers.USER_MODEL.EXAMPLE_DATA.password, (err, status) => {\n        expect(status).to.be.true;\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ccd37524-a570-4959-ada5-356632b16445",
      "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.comparePassword() with wrong password as an argument should return false as the second argument in callback",
      "fullTitle": "Tests with required mongoose connection: method user.comparePassword() with wrong password as an argument should return false as the second argument in callback",
      "timedOut": false,
      "duration": 66,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userModel.findOne({\n    email: helpers.USER_MODEL.EXAMPLE_DATA.email\n}, (err, user) => {\n    user.comparePasswords('wrong_password', (err, status) => {\n        expect(status).to.be.false;\n        done();\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d226149c-2e3f-4388-936f-c5505d96f65a",
      "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "new user object should contain properties created and updated",
      "fullTitle": "Tests with required mongoose connection: new user object should contain properties created and updated",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userModel.findOne({\n    email: helpers.USER_MODEL.EXAMPLE_DATA.email\n}, (err, user) => {\n    expect(user).to.have.property('created');\n    expect(user).to.have.property('updated');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ad441b44-c8de-419e-ad79-7cec396ba78a",
      "parentUUID": "341cb913-0f75-4c08-bbac-6d72a3549f79",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "new user object should contain all required properties with correct values",
      "fullTitle": "Tests without required mongoose connection: new user object should contain all required properties with correct values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA).toObject();\nconst userEqual = helpers.USER_MODEL.EXAMPLE_DATA;\nuserEqual._id = user._id;\nexpect(user).to.deep.equal(helpers.USER_MODEL.EXAMPLE_DATA);",
      "err": {},
      "isRoot": false,
      "uuid": "bd616b7d-72bf-41d9-b5c1-58df53a8d972",
      "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.toJSON() should return correct user object with removed password and active_tokens properties",
      "fullTitle": "Tests without required mongoose connection: method user.toJSON() should return correct user object with removed password and active_tokens properties",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA).toJSON();\nconst userEqual = helpers.USER_MODEL.EXAMPLE_DATA;\nuserEqual._id = user._id;\ndelete userEqual.password;\ndelete userEqual.active_tokens;\nexpect(user).to.deep.equal(userEqual);",
      "err": {},
      "isRoot": false,
      "uuid": "d5c001fa-0607-4023-a01e-5c9154c1240b",
      "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.isActiveToken(token_existing) should return true",
      "fullTitle": "Tests without required mongoose connection: method user.isActiveToken(token_existing) should return true",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\nuser.active_tokens.push('token');\nexpect(user.isActiveToken('token')).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "fa73e643-390e-4579-88ed-e8ca86336fc8",
      "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.isActiveToken(token_not_existing) should return false",
      "fullTitle": "Tests without required mongoose connection: method user.isActiveToken(token_not_existing) should return false",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\nexpect(user.isActiveToken('token')).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "3ce11c32-09cd-4a1c-859f-496a0c796892",
      "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method user.removeToken(token) should remove selected token correctly",
      "fullTitle": "Tests without required mongoose connection: method user.removeToken(token) should remove selected token correctly",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = new userModel(helpers.USER_MODEL.EXAMPLE_DATA);\nuser.active_tokens.push('token');\nexpect(user.active_tokens).to.contains('token');\nuser.removeToken('token');\nexpect(user.active_tokens).to.not.contains('token');",
      "err": {},
      "isRoot": false,
      "uuid": "06f50e8d-dd58-4034-b3d8-a3e617c6537b",
      "parentUUID": "8069e7dc-cd76-4edd-a5ff-154888e23cde",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is an instance of an array",
      "fullTitle": "pages.js is an instance of an array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(pages).to.be.an.instanceof(Array);",
      "err": {},
      "isRoot": false,
      "uuid": "c2dfcd17-4232-4588-b48d-124fa0e27975",
      "parentUUID": "80a81f25-0b99-4cd7-bfba-025fae3a5445",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "an array should contain only objects",
      "fullTitle": "pages.js an array should contain only objects",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "pages.forEach((elem) => {\n                expect(elem).to.be.an('object');\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "ba00b2c6-a646-4af7-ac91-4ef48a3f89f1",
      "parentUUID": "80a81f25-0b99-4cd7-bfba-025fae3a5445",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "each object in an array should have correctly completed properties name, url and fileName",
      "fullTitle": "pages.js each object in an array should have correctly completed properties name, url and fileName",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "pages.forEach((elem) => {\n                expect(elem).to.have.property('name').and.not.to.be.empty;\n                expect(elem).to.have.property('url').and.to.match(/^\\/{1}[a-z0-9-_]{1,24}$/);\n                expect(elem).to.have.property('fileName').and.not.to.be.empty;\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "bce60e02-16fd-4fb8-90a0-59a6ef32f516",
      "parentUUID": "80a81f25-0b99-4cd7-bfba-025fae3a5445",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is an array",
      "fullTitle": "routes.js is an array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(routes).to.be.an('array');",
      "err": {},
      "isRoot": false,
      "uuid": "0b5b747a-cf99-4998-b846-8e43d1b60a8e",
      "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "routes <array> should contain only objects",
      "fullTitle": "routes.js routes <array> should contain only objects",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "routes.forEach((elem) => {\n    expect(elem).to.be.an('object');\n});",
      "err": {},
      "isRoot": false,
      "uuid": "82131d0e-4e39-418c-a55e-7ffd76046feb",
      "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "each object in routes <array> should have property url",
      "fullTitle": "routes.js each object in routes <array> should have property url",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "routes.forEach((elem) => {\n    expect(elem).to.have.property('url');\n});",
      "err": {},
      "isRoot": false,
      "uuid": "989acc8e-61e9-455b-bdf0-cdd7e2f45863",
      "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "each object property url in routes <array> should be a string or an array of strings e.g. \"/newOne\" || [\"/newOne\"]",
      "fullTitle": "routes.js each object property url in routes <array> should be a string or an array of strings e.g. \"/newOne\" || [\"/newOne\"]",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const regExp = /(^\\/{1}[a-z0-9-_:{}*\\/]{0,50}$|^\\*$)/;\nroutes.forEach((elem) => {\n    let url = elem.url;\n    expect(typeof url === 'string' || url instanceof Array).to.be.true;\n    if (typeof url === 'string') {\n        expect(url).to.match(regExp);\n    }\n    if (url instanceof Array) {\n        url.forEach((el) => {\n            expect(el).to.match(regExp);\n        });\n    }\n});",
      "err": {},
      "isRoot": false,
      "uuid": "089bc832-0fd0-449c-bda3-2072400a11fe",
      "parentUUID": "e74da255-0763-4ab5-ac68-0f2794fe6576",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "alertHandler.js is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(alertHandler).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "0f678c60-c3cf-4f51-b3d6-d5ae80b6f5ed",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "without any arguments should display a console.log message with info style",
      "fullTitle": "alertHandler.js without any arguments should display a console.log message with info style",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "alertHandler();\nexpect(console.log).to.always.have.been.calledWith(chalk.blue(messageTemplate('Info', 'Remember to specify necessary property type & message in a configuration object or pass arguments in the same order.')));",
      "err": {},
      "isRoot": false,
      "uuid": "11bf6743-4123-4b87-90f8-3b73e1d4f724",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with specified arguments type: normal, message: Normal message! and title: Normal title should display a console.log message with normal style",
      "fullTitle": "alertHandler.js with specified arguments type: normal, message: Normal message! and title: Normal title should display a console.log message with normal style",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const type = 'normal';\nconst message = 'Normal message!';\nconst title = 'Normal title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.white(messageTemplate(title, message)));",
      "err": {},
      "isRoot": false,
      "uuid": "2d3d26d2-3ad7-4748-9088-f2a291c51a36",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with specified arguments type: success, message: Success message! and title: Success title should display a console.log message with success style",
      "fullTitle": "alertHandler.js with specified arguments type: success, message: Success message! and title: Success title should display a console.log message with success style",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const type = 'success';\nconst message = 'Success message!';\nconst title = 'Success title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.green(messageTemplate(title, message)));",
      "err": {},
      "isRoot": false,
      "uuid": "8ca73ec1-2d7d-47e6-b8a3-64b28170964d",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with specified arguments type: info, message: Info message! and title: Info title should display a console.log message with info style",
      "fullTitle": "alertHandler.js with specified arguments type: info, message: Info message! and title: Info title should display a console.log message with info style",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const type = 'info';\nconst message = 'Info message!';\nconst title = 'Info title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.blue(messageTemplate(title, message)));",
      "err": {},
      "isRoot": false,
      "uuid": "b7da04c8-f7a1-4a6c-abcb-f05ee0bc557b",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with specified arguments type: warning, message: Warning message! and title: Warning title should display a console.log message with warning style",
      "fullTitle": "alertHandler.js with specified arguments type: warning, message: Warning message! and title: Warning title should display a console.log message with warning style",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const type = 'warning';\nconst message = 'Warning message!';\nconst title = 'Warning title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.yellow(messageTemplate(title, message)));",
      "err": {},
      "isRoot": false,
      "uuid": "c8948f5c-f51f-4653-8319-454b602e8bac",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "with specified arguments type: error, message: Error message! and title: Error title should display a console.log message with error style",
      "fullTitle": "alertHandler.js with specified arguments type: error, message: Error message! and title: Error title should display a console.log message with error style",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const type = 'error';\nconst message = 'Error message!';\nconst title = 'Error title';\nalertHandler(type, message, title);\nexpect(console.log).to.always.have.been.calledWith(chalk.red(messageTemplate(title, message)));",
      "err": {},
      "isRoot": false,
      "uuid": "1df79e7d-b7c1-4e5a-beda-ab32eb57c434",
      "parentUUID": "d623be88-7c84-4c2f-9747-44be4c8095ab",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is a function",
      "fullTitle": "mailHandler.js is a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(mailHandler).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "2cb3177b-e7e0-4828-ad68-d01fe9e4ecc8",
      "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "mailHandler() without any arguments should return false",
      "fullTitle": "mailHandler.js mailHandler() without any arguments should return false",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mailHandler().then((info) => {\n    /* eslint-disable */\n    console.log(info);\n    /* eslint-enable */\n    done();\n}, (err) => {\n    expect(err).to.be.false;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "48e80255-5a29-4bbb-bf9b-d0ebd0091a41",
      "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "mailHandler(config, user) without property type in config object <config.type> should return false",
      "fullTitle": "mailHandler.js mailHandler(config, user) without property type in config object <config.type> should return false",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "mailHandler({}, {}).then((info) => {\n    /* eslint-disable */\n    console.log(info);\n    /* eslint-enable */\n    done();\n}, (err) => {\n    expect(err).to.be.false;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f10aa96e-b61a-4efc-8f69-7433762c5914",
      "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "mailHandler({type: \"verification-email\"}, {email: \"a@a\"}) should add to object config properties from, to, subject and html with correct values",
      "fullTitle": "mailHandler.js mailHandler({type: \"verification-email\"}, {email: \"a@a\"}) should add to object config properties from, to, subject and html with correct values",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const user = {\n    email: 'a@a'\n};\nconst config = {\n    type: 'verification_email'\n};\n/* eslint-disable */\nmailHandler(config, user).catch((err) => {\n    //console.log(err);\n});\n/* eslint-enable */\nexpect(config).to.deep.equal({\n    type: 'verification_email',\n    from: '[Restful API] <admin@mateusz-archicinski.pl>',\n    to: 'a@a',\n    subject: 'Email verification',\n    html: '<p>Verify your email address by clicking on <a href=\"undefined/verification/email?token=token\">activate link</a>.</p>'\n});",
      "err": {},
      "isRoot": false,
      "uuid": "dadac28a-31be-4597-be96-da39e359ad7d",
      "parentUUID": "f1931ecc-1a73-4811-a809-704c5a417b6c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is an object",
      "fullTitle": "mongoose.js is an object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(mongoose).to.be.an('object');",
      "err": {},
      "isRoot": false,
      "uuid": "053fd0c3-b6b1-425a-88c5-76bead8e8144",
      "parentUUID": "7ff56bf3-d49f-46e2-9835-a406f0ef6057",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "is an object which contains encode and decode methods",
      "fullTitle": "tokenHandler.js is an object which contains encode and decode methods",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(tokenHandler).to.be.an('object');\nexpect(tokenHandler.encode).to.be.a('function');\nexpect(tokenHandler.decode).to.be.a('function');",
      "err": {},
      "isRoot": false,
      "uuid": "03413537-8eb5-4e21-b22a-15c084cfa91f",
      "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method tokenHandler.encode(subject) should call jwt.encode(payload, secret) once",
      "fullTitle": "tokenHandler.js method tokenHandler.encode(subject) should call jwt.encode(payload, secret) once",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tokenHandler.encode({});\nexpect(jwt.encode).to.have.been.calledOnce;",
      "err": {},
      "isRoot": false,
      "uuid": "74624c7b-9c82-48c9-b3e0-5149a30714d7",
      "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method tokenHandler.decode(token) should call jwt.decode(token) once",
      "fullTitle": "tokenHandler.js method tokenHandler.decode(token) should call jwt.decode(token) once",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n    tokenHandler.decode('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdWJqZWN0IiwiaWF0IjoxNDk0ODU1OTgxLCJleHAiOjE0OTU0NjA3ODF9.3n7ognYsQRw0n9UirTB8DCpXAzHNYWyutPz92gskVT0');\n} catch (err) {\n    expect(err.message).to.equal('Signature verification failed');\n}",
      "err": {},
      "isRoot": false,
      "uuid": "9b66b6cd-6cc8-45f5-bdfc-17e49b65bb02",
      "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method tokenHandler.decode(token) should return an object with the same payload which was encoded in token",
      "fullTitle": "tokenHandler.js method tokenHandler.decode(token) should return an object with the same payload which was encoded in token",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const encodedToken = tokenHandler.encode(objectMock);\nconst payload = tokenHandler.decode(encodedToken).payload;\nObject.keys(objectMock).forEach((key) => {\n    expect(payload[key]).to.equal(objectMock[key]);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ddf7a006-6e1c-4fa3-b339-c4cf4506537f",
      "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method of decoded token isValid() should return true",
      "fullTitle": "tokenHandler.js method of decoded token isValid() should return true",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const encodedToken = tokenHandler.encode(objectMock);\nconst isValid = tokenHandler.decode(encodedToken).isValid();\nexpect(isValid).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "2e95a982-6479-46f5-8528-c3a7068e1556",
      "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "method of decoded token isValid() should return false",
      "fullTitle": "tokenHandler.js method of decoded token isValid() should return false",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "sinon.stub(jwt, 'decode').returns({\n    exp: 1\n});\nconst encodedToken = tokenHandler.encode(objectMock);\nconst isValid = tokenHandler.decode(encodedToken).isValid();\nexpect(isValid).to.be.false;\njwt.decode.restore();",
      "err": {},
      "isRoot": false,
      "uuid": "7ab142fc-47ed-41a9-871e-6e6acf21cc98",
      "parentUUID": "f065eb04-9c3c-4cee-b076-f2c0c551cd11",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}